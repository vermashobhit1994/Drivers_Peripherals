
stm32f446xx_driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000640  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000804  0800080c  0001080c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000804  08000804  0001080c  2**0
                  CONTENTS
  4 .ARM          00000000  08000804  08000804  0001080c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000804  0800080c  0001080c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000804  08000804  00010804  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000808  08000808  00010808  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0001080c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  0800080c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  0800080c  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001080c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000012c6  00000000  00000000  0001083c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000319  00000000  00000000  00011b02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000b8  00000000  00000000  00011e20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000090  00000000  00000000  00011ed8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000029cc  00000000  00000000  00011f68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001091  00000000  00000000  00014934  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000ba5c  00000000  00000000  000159c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00021421  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000224  00000000  00000000  00021474  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080007ec 	.word	0x080007ec

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	080007ec 	.word	0x080007ec

08000204 <main>:
	clock_t time = 1000;
	printf("%ld",time);
}
*/
int main(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	b084      	sub	sp, #16
 8000208:	af00      	add	r7, sp, #0

	GPIO_Handle_t gpio_led;
	gpio_led.pGPIOx = GPIOA;
 800020a:	4b0c      	ldr	r3, [pc, #48]	; (800023c <main+0x38>)
 800020c:	607b      	str	r3, [r7, #4]
	gpio_led.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_5;
 800020e:	2305      	movs	r3, #5
 8000210:	723b      	strb	r3, [r7, #8]
	gpio_led.GPIO_PinConfig.GPIO_PinMode =  GPIO_MODE_OUT;
 8000212:	2301      	movs	r3, #1
 8000214:	727b      	strb	r3, [r7, #9]

	gpio_led.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_MEDIUM ;
 8000216:	2301      	movs	r3, #1
 8000218:	72bb      	strb	r3, [r7, #10]
	gpio_led.GPIO_PinConfig.GPIO_PinOPType = GPIO_OPTYPE_PUSH_PULL;
 800021a:	2300      	movs	r3, #0
 800021c:	733b      	strb	r3, [r7, #12]
	gpio_led.GPIO_PinConfig.GPIO_PinPuPdCtrl = GPIO_PIN_NO_PUPD;
 800021e:	2300      	movs	r3, #0
 8000220:	72fb      	strb	r3, [r7, #11]

	GPIO_PeriClock_Ctrl(GPIOA,ENABLE);
 8000222:	2101      	movs	r1, #1
 8000224:	4805      	ldr	r0, [pc, #20]	; (800023c <main+0x38>)
 8000226:	f000 f9bf 	bl	80005a8 <GPIO_PeriClock_Ctrl>
	GPIO_Init(&gpio_led);
 800022a:	1d3b      	adds	r3, r7, #4
 800022c:	4618      	mov	r0, r3
 800022e:	f000 f831 	bl	8000294 <GPIO_Init>
	while (1)
	{

		GPIO_ToggleOutputPin(GPIOA, GPIO_PIN_NO_5);
 8000232:	2105      	movs	r1, #5
 8000234:	4801      	ldr	r0, [pc, #4]	; (800023c <main+0x38>)
 8000236:	f000 fa9f 	bl	8000778 <GPIO_ToggleOutputPin>
 800023a:	e7fa      	b.n	8000232 <main+0x2e>
 800023c:	40020000 	.word	0x40020000

08000240 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000240:	480d      	ldr	r0, [pc, #52]	; (8000278 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000242:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000244:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000248:	480c      	ldr	r0, [pc, #48]	; (800027c <LoopForever+0x6>)
  ldr r1, =_edata
 800024a:	490d      	ldr	r1, [pc, #52]	; (8000280 <LoopForever+0xa>)
  ldr r2, =_sidata
 800024c:	4a0d      	ldr	r2, [pc, #52]	; (8000284 <LoopForever+0xe>)
  movs r3, #0
 800024e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000250:	e002      	b.n	8000258 <LoopCopyDataInit>

08000252 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000252:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000254:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000256:	3304      	adds	r3, #4

08000258 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000258:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800025a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800025c:	d3f9      	bcc.n	8000252 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800025e:	4a0a      	ldr	r2, [pc, #40]	; (8000288 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000260:	4c0a      	ldr	r4, [pc, #40]	; (800028c <LoopForever+0x16>)
  movs r3, #0
 8000262:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000264:	e001      	b.n	800026a <LoopFillZerobss>

08000266 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000266:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000268:	3204      	adds	r2, #4

0800026a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800026a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800026c:	d3fb      	bcc.n	8000266 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800026e:	f000 fa99 	bl	80007a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000272:	f7ff ffc7 	bl	8000204 <main>

08000276 <LoopForever>:

LoopForever:
    b LoopForever
 8000276:	e7fe      	b.n	8000276 <LoopForever>
  ldr   r0, =_estack
 8000278:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800027c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000280:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000284:	0800080c 	.word	0x0800080c
  ldr r2, =_sbss
 8000288:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800028c:	2000001c 	.word	0x2000001c

08000290 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000290:	e7fe      	b.n	8000290 <ADC_IRQHandler>
	...

08000294 <GPIO_Init>:
 * Input Parameter 1 description : Base address of the gpio peripheral
 * Return Type                   : None
 * Special Note                  : None
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)//initialize the GPIO Port and Pin
{
 8000294:	b580      	push	{r7, lr}
 8000296:	b086      	sub	sp, #24
 8000298:	af00      	add	r7, sp, #0
 800029a:	6078      	str	r0, [r7, #4]
	//enable the GPIO Peripheral Clock so no need to configure in application part.
	GPIO_PeriClock_Ctrl(pGPIOHandle ->pGPIOx, ENABLE);
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	2101      	movs	r1, #1
 80002a2:	4618      	mov	r0, r3
 80002a4:	f000 f980 	bl	80005a8 <GPIO_PeriClock_Ctrl>

	uint32_t temp = 0;
 80002a8:	2300      	movs	r3, #0
 80002aa:	617b      	str	r3, [r7, #20]
/* Here if the mode is less than 3 then it is non-interrupt mode else interrupt mode
 * Here we need to change only the Pins in the actual position and not touch other bits*/
	//1. Configure the mode of GPIO Pin
	if(pGPIOHandle ->GPIO_PinConfig.GPIO_PinMode <= (GPIO_MODE_ANALOG) )
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	795b      	ldrb	r3, [r3, #5]
 80002b0:	2b03      	cmp	r3, #3
 80002b2:	d81f      	bhi.n	80002f4 <GPIO_Init+0x60>
		/*temp stores the pinmode input by the user.
		 * Here each pin takes 2 fields of GPIOMode register
		 * PinMode left shift by 2*PinNumber

		 */
		temp = (pGPIOHandle ->GPIO_PinConfig.GPIO_PinMode << (2*pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber));
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	795b      	ldrb	r3, [r3, #5]
 80002b8:	461a      	mov	r2, r3
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	791b      	ldrb	r3, [r3, #4]
 80002be:	005b      	lsls	r3, r3, #1
 80002c0:	fa02 f303 	lsl.w	r3, r2, r3
 80002c4:	617b      	str	r3, [r7, #20]
		//reset the MODER Register PinNUmber bits
		pGPIOHandle -> pGPIOx -> MODER &= ~(0x3 << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);//clear the pinNumber
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	681b      	ldr	r3, [r3, #0]
 80002ca:	681a      	ldr	r2, [r3, #0]
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	791b      	ldrb	r3, [r3, #4]
 80002d0:	4619      	mov	r1, r3
 80002d2:	2303      	movs	r3, #3
 80002d4:	408b      	lsls	r3, r1
 80002d6:	43db      	mvns	r3, r3
 80002d8:	4619      	mov	r1, r3
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	400a      	ands	r2, r1
 80002e0:	601a      	str	r2, [r3, #0]

		//putting the value in MODER  register
		pGPIOHandle -> pGPIOx -> MODER |= temp;
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	6819      	ldr	r1, [r3, #0]
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	697a      	ldr	r2, [r7, #20]
 80002ee:	430a      	orrs	r2, r1
 80002f0:	601a      	str	r2, [r3, #0]
 80002f2:	e0a8      	b.n	8000446 <GPIO_Init+0x1b2>
	/* Interrupt Mode handling*/
	else
	{
		//STEP 1: Configure the selection register
		//if the mode is falling edge
		if(pGPIOHandle ->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_INT_FALLEDGE_TRIGGER)
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	795b      	ldrb	r3, [r3, #5]
 80002f8:	2b04      	cmp	r3, #4
 80002fa:	d117      	bne.n	800032c <GPIO_Init+0x98>
		{
			/*1. configure the falling trigger selection register(FTSR)
			 * and setting the pin corresponding to PinNumber
			 */
			EXTI -> EXTI_FTSR |= (1 << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 80002fc:	4ba0      	ldr	r3, [pc, #640]	; (8000580 <GPIO_Init+0x2ec>)
 80002fe:	68db      	ldr	r3, [r3, #12]
 8000300:	687a      	ldr	r2, [r7, #4]
 8000302:	7912      	ldrb	r2, [r2, #4]
 8000304:	4611      	mov	r1, r2
 8000306:	2201      	movs	r2, #1
 8000308:	408a      	lsls	r2, r1
 800030a:	4611      	mov	r1, r2
 800030c:	4a9c      	ldr	r2, [pc, #624]	; (8000580 <GPIO_Init+0x2ec>)
 800030e:	430b      	orrs	r3, r1
 8000310:	60d3      	str	r3, [r2, #12]
			//clear the corresponding bit in RTSR to only enable the RTSR register
			EXTI -> EXTI_RTSR &= ~(1 << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 8000312:	4b9b      	ldr	r3, [pc, #620]	; (8000580 <GPIO_Init+0x2ec>)
 8000314:	689b      	ldr	r3, [r3, #8]
 8000316:	687a      	ldr	r2, [r7, #4]
 8000318:	7912      	ldrb	r2, [r2, #4]
 800031a:	4611      	mov	r1, r2
 800031c:	2201      	movs	r2, #1
 800031e:	408a      	lsls	r2, r1
 8000320:	43d2      	mvns	r2, r2
 8000322:	4611      	mov	r1, r2
 8000324:	4a96      	ldr	r2, [pc, #600]	; (8000580 <GPIO_Init+0x2ec>)
 8000326:	400b      	ands	r3, r1
 8000328:	6093      	str	r3, [r2, #8]
 800032a:	e035      	b.n	8000398 <GPIO_Init+0x104>

		}
		//if the mode is rising edge
		else if(pGPIOHandle ->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_INT_RISINGEDGE_TRIGGER)
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	795b      	ldrb	r3, [r3, #5]
 8000330:	2b05      	cmp	r3, #5
 8000332:	d117      	bne.n	8000364 <GPIO_Init+0xd0>
		{
			//1. configure the RTSR(Rising Trigger Selection Register)
			EXTI -> EXTI_RTSR |= (1<<pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 8000334:	4b92      	ldr	r3, [pc, #584]	; (8000580 <GPIO_Init+0x2ec>)
 8000336:	689b      	ldr	r3, [r3, #8]
 8000338:	687a      	ldr	r2, [r7, #4]
 800033a:	7912      	ldrb	r2, [r2, #4]
 800033c:	4611      	mov	r1, r2
 800033e:	2201      	movs	r2, #1
 8000340:	408a      	lsls	r2, r1
 8000342:	4611      	mov	r1, r2
 8000344:	4a8e      	ldr	r2, [pc, #568]	; (8000580 <GPIO_Init+0x2ec>)
 8000346:	430b      	orrs	r3, r1
 8000348:	6093      	str	r3, [r2, #8]
			//clear the corresponding bit in FTSR
			EXTI -> EXTI_FTSR &= ~(1<<pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 800034a:	4b8d      	ldr	r3, [pc, #564]	; (8000580 <GPIO_Init+0x2ec>)
 800034c:	68db      	ldr	r3, [r3, #12]
 800034e:	687a      	ldr	r2, [r7, #4]
 8000350:	7912      	ldrb	r2, [r2, #4]
 8000352:	4611      	mov	r1, r2
 8000354:	2201      	movs	r2, #1
 8000356:	408a      	lsls	r2, r1
 8000358:	43d2      	mvns	r2, r2
 800035a:	4611      	mov	r1, r2
 800035c:	4a88      	ldr	r2, [pc, #544]	; (8000580 <GPIO_Init+0x2ec>)
 800035e:	400b      	ands	r3, r1
 8000360:	60d3      	str	r3, [r2, #12]
 8000362:	e019      	b.n	8000398 <GPIO_Init+0x104>

		}
		//if the mode is rising and falling edge
		else if(pGPIOHandle ->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_RISINGEDGE_FALLEDGE_TRIGGER)
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	795b      	ldrb	r3, [r3, #5]
 8000368:	2b06      	cmp	r3, #6
 800036a:	d115      	bne.n	8000398 <GPIO_Init+0x104>
		{
			//1. configure both RTSR and FTSR
			//configure the RTSR
			EXTI -> EXTI_RTSR |= (1<<pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 800036c:	4b84      	ldr	r3, [pc, #528]	; (8000580 <GPIO_Init+0x2ec>)
 800036e:	689b      	ldr	r3, [r3, #8]
 8000370:	687a      	ldr	r2, [r7, #4]
 8000372:	7912      	ldrb	r2, [r2, #4]
 8000374:	4611      	mov	r1, r2
 8000376:	2201      	movs	r2, #1
 8000378:	408a      	lsls	r2, r1
 800037a:	4611      	mov	r1, r2
 800037c:	4a80      	ldr	r2, [pc, #512]	; (8000580 <GPIO_Init+0x2ec>)
 800037e:	430b      	orrs	r3, r1
 8000380:	6093      	str	r3, [r2, #8]
			//configure the FTSR
			EXTI -> EXTI_FTSR |= (1<<pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 8000382:	4b7f      	ldr	r3, [pc, #508]	; (8000580 <GPIO_Init+0x2ec>)
 8000384:	68db      	ldr	r3, [r3, #12]
 8000386:	687a      	ldr	r2, [r7, #4]
 8000388:	7912      	ldrb	r2, [r2, #4]
 800038a:	4611      	mov	r1, r2
 800038c:	2201      	movs	r2, #1
 800038e:	408a      	lsls	r2, r1
 8000390:	4611      	mov	r1, r2
 8000392:	4a7b      	ldr	r2, [pc, #492]	; (8000580 <GPIO_Init+0x2ec>)
 8000394:	430b      	orrs	r3, r1
 8000396:	60d3      	str	r3, [r2, #12]
		}
		//STEP 2: configure the GPIO Port selection in SYSCFG_EXTICR(SYSConfig EXTI control register)
		uint8_t tmp1 = pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber/4;//select the EXTI Register
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	791b      	ldrb	r3, [r3, #4]
 800039c:	089b      	lsrs	r3, r3, #2
 800039e:	74fb      	strb	r3, [r7, #19]
		uint8_t tmp2 = pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber % 4;//select the EXTI Register bits
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	791b      	ldrb	r3, [r3, #4]
 80003a4:	f003 0303 	and.w	r3, r3, #3
 80003a8:	74bb      	strb	r3, [r7, #18]

		//enable the clock for the SYSCFG register
		SYSCFG_PER_CLK_EN();
 80003aa:	4b76      	ldr	r3, [pc, #472]	; (8000584 <GPIO_Init+0x2f0>)
 80003ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80003ae:	4a75      	ldr	r2, [pc, #468]	; (8000584 <GPIO_Init+0x2f0>)
 80003b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80003b4:	6453      	str	r3, [r2, #68]	; 0x44
		//Define a Macro that takes the GPIOx base address and return the corresponding port code for the GPIOx
		//Done so as to choose the appropriate EXTI for Port.
		//for Onboard button it is GPIOC and that's why portcode = 2
		uint8_t PortCode = GPIO_BASE_ADDR_TO_CODE(pGPIOHandle -> pGPIOx);
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	4a73      	ldr	r2, [pc, #460]	; (8000588 <GPIO_Init+0x2f4>)
 80003bc:	4293      	cmp	r3, r2
 80003be:	d02b      	beq.n	8000418 <GPIO_Init+0x184>
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	4a71      	ldr	r2, [pc, #452]	; (800058c <GPIO_Init+0x2f8>)
 80003c6:	4293      	cmp	r3, r2
 80003c8:	d024      	beq.n	8000414 <GPIO_Init+0x180>
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	681b      	ldr	r3, [r3, #0]
 80003ce:	4a70      	ldr	r2, [pc, #448]	; (8000590 <GPIO_Init+0x2fc>)
 80003d0:	4293      	cmp	r3, r2
 80003d2:	d01d      	beq.n	8000410 <GPIO_Init+0x17c>
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	4a6e      	ldr	r2, [pc, #440]	; (8000594 <GPIO_Init+0x300>)
 80003da:	4293      	cmp	r3, r2
 80003dc:	d016      	beq.n	800040c <GPIO_Init+0x178>
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	4a6d      	ldr	r2, [pc, #436]	; (8000598 <GPIO_Init+0x304>)
 80003e4:	4293      	cmp	r3, r2
 80003e6:	d00f      	beq.n	8000408 <GPIO_Init+0x174>
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	4a6b      	ldr	r2, [pc, #428]	; (800059c <GPIO_Init+0x308>)
 80003ee:	4293      	cmp	r3, r2
 80003f0:	d008      	beq.n	8000404 <GPIO_Init+0x170>
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	4a6a      	ldr	r2, [pc, #424]	; (80005a0 <GPIO_Init+0x30c>)
 80003f8:	4293      	cmp	r3, r2
 80003fa:	d101      	bne.n	8000400 <GPIO_Init+0x16c>
 80003fc:	2306      	movs	r3, #6
 80003fe:	e00c      	b.n	800041a <GPIO_Init+0x186>
 8000400:	2300      	movs	r3, #0
 8000402:	e00a      	b.n	800041a <GPIO_Init+0x186>
 8000404:	2305      	movs	r3, #5
 8000406:	e008      	b.n	800041a <GPIO_Init+0x186>
 8000408:	2304      	movs	r3, #4
 800040a:	e006      	b.n	800041a <GPIO_Init+0x186>
 800040c:	2303      	movs	r3, #3
 800040e:	e004      	b.n	800041a <GPIO_Init+0x186>
 8000410:	2302      	movs	r3, #2
 8000412:	e002      	b.n	800041a <GPIO_Init+0x186>
 8000414:	2301      	movs	r3, #1
 8000416:	e000      	b.n	800041a <GPIO_Init+0x186>
 8000418:	2300      	movs	r3, #0
 800041a:	747b      	strb	r3, [r7, #17]


		//putting the PortCode in the EXTICRx register
		SYSCFG -> SYSCFG_EXTICR[tmp1] = PortCode <<(4 * tmp2);
 800041c:	7c7a      	ldrb	r2, [r7, #17]
 800041e:	7cbb      	ldrb	r3, [r7, #18]
 8000420:	009b      	lsls	r3, r3, #2
 8000422:	fa02 f103 	lsl.w	r1, r2, r3
 8000426:	4a5f      	ldr	r2, [pc, #380]	; (80005a4 <GPIO_Init+0x310>)
 8000428:	7cfb      	ldrb	r3, [r7, #19]
 800042a:	3302      	adds	r3, #2
 800042c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//STEP 3: Enable the EXTI Interrupt delivery in IMR(Interrupt Mask Register)
		EXTI -> EXTI_IMR |= (1<<pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 8000430:	4b53      	ldr	r3, [pc, #332]	; (8000580 <GPIO_Init+0x2ec>)
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	687a      	ldr	r2, [r7, #4]
 8000436:	7912      	ldrb	r2, [r2, #4]
 8000438:	4611      	mov	r1, r2
 800043a:	2201      	movs	r2, #1
 800043c:	408a      	lsls	r2, r1
 800043e:	4611      	mov	r1, r2
 8000440:	4a4f      	ldr	r2, [pc, #316]	; (8000580 <GPIO_Init+0x2ec>)
 8000442:	430b      	orrs	r3, r1
 8000444:	6013      	str	r3, [r2, #0]
	}
	//2. Configure the speed
	temp = 0;//again putting the value temp to zero
 8000446:	2300      	movs	r3, #0
 8000448:	617b      	str	r3, [r7, #20]
	temp = pGPIOHandle -> 	GPIO_PinConfig.GPIO_PinSpeed << (2*pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	799b      	ldrb	r3, [r3, #6]
 800044e:	461a      	mov	r2, r3
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	791b      	ldrb	r3, [r3, #4]
 8000454:	005b      	lsls	r3, r3, #1
 8000456:	fa02 f303 	lsl.w	r3, r2, r3
 800045a:	617b      	str	r3, [r7, #20]
	pGPIOHandle -> pGPIOx -> OSPEEDR &= ~(0x3 <<pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);//clear the pinNumber
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	689a      	ldr	r2, [r3, #8]
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	791b      	ldrb	r3, [r3, #4]
 8000466:	4619      	mov	r1, r3
 8000468:	2303      	movs	r3, #3
 800046a:	408b      	lsls	r3, r1
 800046c:	43db      	mvns	r3, r3
 800046e:	4619      	mov	r1, r3
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	400a      	ands	r2, r1
 8000476:	609a      	str	r2, [r3, #8]
	pGPIOHandle -> pGPIOx -> OSPEEDR |= temp;//set the PinNumber
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	6899      	ldr	r1, [r3, #8]
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	697a      	ldr	r2, [r7, #20]
 8000484:	430a      	orrs	r2, r1
 8000486:	609a      	str	r2, [r3, #8]

	//3. Configure the pull up or pull down settings
	temp = 0;//again putting the value temp to zero
 8000488:	2300      	movs	r3, #0
 800048a:	617b      	str	r3, [r7, #20]
	temp = pGPIOHandle -> 	GPIO_PinConfig.GPIO_PinPuPdCtrl << (2*pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	79db      	ldrb	r3, [r3, #7]
 8000490:	461a      	mov	r2, r3
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	791b      	ldrb	r3, [r3, #4]
 8000496:	005b      	lsls	r3, r3, #1
 8000498:	fa02 f303 	lsl.w	r3, r2, r3
 800049c:	617b      	str	r3, [r7, #20]
	pGPIOHandle -> pGPIOx -> PUPDR &= ~(0x3 <<pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);//clear the pinNumber
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	68da      	ldr	r2, [r3, #12]
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	791b      	ldrb	r3, [r3, #4]
 80004a8:	4619      	mov	r1, r3
 80004aa:	2303      	movs	r3, #3
 80004ac:	408b      	lsls	r3, r1
 80004ae:	43db      	mvns	r3, r3
 80004b0:	4619      	mov	r1, r3
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	400a      	ands	r2, r1
 80004b8:	60da      	str	r2, [r3, #12]
	pGPIOHandle -> pGPIOx -> PUPDR |= temp;
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	68d9      	ldr	r1, [r3, #12]
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	697a      	ldr	r2, [r7, #20]
 80004c6:	430a      	orrs	r2, r1
 80004c8:	60da      	str	r2, [r3, #12]

	/*4. Configure the output type
	 * Here no need to multiply by 1 since each pin belong to only 1 bit
	 */
	temp = 0;//again putting the value temp to zero
 80004ca:	2300      	movs	r3, #0
 80004cc:	617b      	str	r3, [r7, #20]
	temp = pGPIOHandle -> 	GPIO_PinConfig.GPIO_PinOPType << (1*pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	7a1b      	ldrb	r3, [r3, #8]
 80004d2:	461a      	mov	r2, r3
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	791b      	ldrb	r3, [r3, #4]
 80004d8:	fa02 f303 	lsl.w	r3, r2, r3
 80004dc:	617b      	str	r3, [r7, #20]
	pGPIOHandle -> pGPIOx -> OTYPER &= ~(0x1 <<pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);//clear the pinNumber
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	685a      	ldr	r2, [r3, #4]
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	791b      	ldrb	r3, [r3, #4]
 80004e8:	4619      	mov	r1, r3
 80004ea:	2301      	movs	r3, #1
 80004ec:	408b      	lsls	r3, r1
 80004ee:	43db      	mvns	r3, r3
 80004f0:	4619      	mov	r1, r3
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	400a      	ands	r2, r1
 80004f8:	605a      	str	r2, [r3, #4]
	pGPIOHandle -> pGPIOx -> OTYPER |= temp;
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	6859      	ldr	r1, [r3, #4]
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	697a      	ldr	r2, [r7, #20]
 8000506:	430a      	orrs	r2, r1
 8000508:	605a      	str	r2, [r3, #4]

	//5. Configure the alternate functionality only when the mode selected in the PinMode is alternate function
	if(pGPIOHandle -> 	GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFUN)
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	795b      	ldrb	r3, [r3, #5]
 800050e:	2b02      	cmp	r3, #2
 8000510:	d131      	bne.n	8000576 <GPIO_Init+0x2e2>
	{
		//configure the alternate function registers
		uint8_t temp1,temp2;
		temp1 = pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber/8;//dividing by 8 to select whether the alternate low or high register
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	791b      	ldrb	r3, [r3, #4]
 8000516:	08db      	lsrs	r3, r3, #3
 8000518:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber%8;//to get the actual bit position
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	791b      	ldrb	r3, [r3, #4]
 800051e:	f003 0307 	and.w	r3, r3, #7
 8000522:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle -> pGPIOx -> AFR[temp1] &= ~(0xF <<(4*temp2));//since 4 bits
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	7c3a      	ldrb	r2, [r7, #16]
 800052a:	3208      	adds	r2, #8
 800052c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000530:	7bfb      	ldrb	r3, [r7, #15]
 8000532:	009b      	lsls	r3, r3, #2
 8000534:	220f      	movs	r2, #15
 8000536:	fa02 f303 	lsl.w	r3, r2, r3
 800053a:	43db      	mvns	r3, r3
 800053c:	4618      	mov	r0, r3
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	7c3a      	ldrb	r2, [r7, #16]
 8000544:	4001      	ands	r1, r0
 8000546:	3208      	adds	r2, #8
 8000548:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle -> pGPIOx -> AFR[temp1] |= (pGPIOHandle -> GPIO_PinConfig.GPIO_PinAltFunMode<<(4*temp2));
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	7c3a      	ldrb	r2, [r7, #16]
 8000552:	3208      	adds	r2, #8
 8000554:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	7a5b      	ldrb	r3, [r3, #9]
 800055c:	461a      	mov	r2, r3
 800055e:	7bfb      	ldrb	r3, [r7, #15]
 8000560:	009b      	lsls	r3, r3, #2
 8000562:	fa02 f303 	lsl.w	r3, r2, r3
 8000566:	4618      	mov	r0, r3
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	7c3a      	ldrb	r2, [r7, #16]
 800056e:	4301      	orrs	r1, r0
 8000570:	3208      	adds	r2, #8
 8000572:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 8000576:	bf00      	nop
 8000578:	3718      	adds	r7, #24
 800057a:	46bd      	mov	sp, r7
 800057c:	bd80      	pop	{r7, pc}
 800057e:	bf00      	nop
 8000580:	40013c00 	.word	0x40013c00
 8000584:	40023800 	.word	0x40023800
 8000588:	40020000 	.word	0x40020000
 800058c:	40020400 	.word	0x40020400
 8000590:	40020800 	.word	0x40020800
 8000594:	40020c00 	.word	0x40020c00
 8000598:	40021000 	.word	0x40021000
 800059c:	40021400 	.word	0x40021400
 80005a0:	40021800 	.word	0x40021800
 80005a4:	40013800 	.word	0x40013800

080005a8 <GPIO_PeriClock_Ctrl>:
 * Input Parameter 2 description : ENABLE or DISABLE Macro
 * Return Type                   : None
 * Special Note                  : None
 */
void GPIO_PeriClock_Ctrl(GPIO_RegDef_t *pGPIOx,uint8_t ENOrDI)//enable and disable the peripheral clock
{
 80005a8:	b480      	push	{r7}
 80005aa:	b083      	sub	sp, #12
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
 80005b0:	460b      	mov	r3, r1
 80005b2:	70fb      	strb	r3, [r7, #3]
	//enable the clock
	if(ENOrDI == ENABLE)
 80005b4:	78fb      	ldrb	r3, [r7, #3]
 80005b6:	2b01      	cmp	r3, #1
 80005b8:	d162      	bne.n	8000680 <GPIO_PeriClock_Ctrl+0xd8>
	{
		if(pGPIOx == GPIOA)
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	4a64      	ldr	r2, [pc, #400]	; (8000750 <GPIO_PeriClock_Ctrl+0x1a8>)
 80005be:	4293      	cmp	r3, r2
 80005c0:	d106      	bne.n	80005d0 <GPIO_PeriClock_Ctrl+0x28>
			GPIOA_PERI_CLK_EN();
 80005c2:	4b64      	ldr	r3, [pc, #400]	; (8000754 <GPIO_PeriClock_Ctrl+0x1ac>)
 80005c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c6:	4a63      	ldr	r2, [pc, #396]	; (8000754 <GPIO_PeriClock_Ctrl+0x1ac>)
 80005c8:	f043 0301 	orr.w	r3, r3, #1
 80005cc:	6313      	str	r3, [r2, #48]	; 0x30
			GPIOH_PERI_CLK_DI();
		else if(pGPIOx == GPIOI)
			GPIOI_PERI_CLK_DI();

	}
}
 80005ce:	e0b9      	b.n	8000744 <GPIO_PeriClock_Ctrl+0x19c>
		else if(pGPIOx == GPIOB)
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	4a61      	ldr	r2, [pc, #388]	; (8000758 <GPIO_PeriClock_Ctrl+0x1b0>)
 80005d4:	4293      	cmp	r3, r2
 80005d6:	d106      	bne.n	80005e6 <GPIO_PeriClock_Ctrl+0x3e>
			GPIOB_PERI_CLK_EN();
 80005d8:	4b5e      	ldr	r3, [pc, #376]	; (8000754 <GPIO_PeriClock_Ctrl+0x1ac>)
 80005da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005dc:	4a5d      	ldr	r2, [pc, #372]	; (8000754 <GPIO_PeriClock_Ctrl+0x1ac>)
 80005de:	f043 0302 	orr.w	r3, r3, #2
 80005e2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005e4:	e0ae      	b.n	8000744 <GPIO_PeriClock_Ctrl+0x19c>
		else if(pGPIOx == GPIOC)
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	4a5c      	ldr	r2, [pc, #368]	; (800075c <GPIO_PeriClock_Ctrl+0x1b4>)
 80005ea:	4293      	cmp	r3, r2
 80005ec:	d106      	bne.n	80005fc <GPIO_PeriClock_Ctrl+0x54>
			GPIOC_PERI_CLK_EN();
 80005ee:	4b59      	ldr	r3, [pc, #356]	; (8000754 <GPIO_PeriClock_Ctrl+0x1ac>)
 80005f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f2:	4a58      	ldr	r2, [pc, #352]	; (8000754 <GPIO_PeriClock_Ctrl+0x1ac>)
 80005f4:	f043 0304 	orr.w	r3, r3, #4
 80005f8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005fa:	e0a3      	b.n	8000744 <GPIO_PeriClock_Ctrl+0x19c>
		else if(pGPIOx == GPIOD)
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	4a58      	ldr	r2, [pc, #352]	; (8000760 <GPIO_PeriClock_Ctrl+0x1b8>)
 8000600:	4293      	cmp	r3, r2
 8000602:	d106      	bne.n	8000612 <GPIO_PeriClock_Ctrl+0x6a>
			GPIOD_PERI_CLK_EN();
 8000604:	4b53      	ldr	r3, [pc, #332]	; (8000754 <GPIO_PeriClock_Ctrl+0x1ac>)
 8000606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000608:	4a52      	ldr	r2, [pc, #328]	; (8000754 <GPIO_PeriClock_Ctrl+0x1ac>)
 800060a:	f043 0308 	orr.w	r3, r3, #8
 800060e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000610:	e098      	b.n	8000744 <GPIO_PeriClock_Ctrl+0x19c>
		else if(pGPIOx == GPIOE)
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	4a53      	ldr	r2, [pc, #332]	; (8000764 <GPIO_PeriClock_Ctrl+0x1bc>)
 8000616:	4293      	cmp	r3, r2
 8000618:	d106      	bne.n	8000628 <GPIO_PeriClock_Ctrl+0x80>
			GPIOE_PERI_CLK_EN();
 800061a:	4b4e      	ldr	r3, [pc, #312]	; (8000754 <GPIO_PeriClock_Ctrl+0x1ac>)
 800061c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061e:	4a4d      	ldr	r2, [pc, #308]	; (8000754 <GPIO_PeriClock_Ctrl+0x1ac>)
 8000620:	f043 0310 	orr.w	r3, r3, #16
 8000624:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000626:	e08d      	b.n	8000744 <GPIO_PeriClock_Ctrl+0x19c>
		else if(pGPIOx == GPIOF)
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	4a4f      	ldr	r2, [pc, #316]	; (8000768 <GPIO_PeriClock_Ctrl+0x1c0>)
 800062c:	4293      	cmp	r3, r2
 800062e:	d106      	bne.n	800063e <GPIO_PeriClock_Ctrl+0x96>
			GPIOF_PERI_CLK_EN();
 8000630:	4b48      	ldr	r3, [pc, #288]	; (8000754 <GPIO_PeriClock_Ctrl+0x1ac>)
 8000632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000634:	4a47      	ldr	r2, [pc, #284]	; (8000754 <GPIO_PeriClock_Ctrl+0x1ac>)
 8000636:	f043 0320 	orr.w	r3, r3, #32
 800063a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800063c:	e082      	b.n	8000744 <GPIO_PeriClock_Ctrl+0x19c>
		else if(pGPIOx == GPIOG)
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	4a4a      	ldr	r2, [pc, #296]	; (800076c <GPIO_PeriClock_Ctrl+0x1c4>)
 8000642:	4293      	cmp	r3, r2
 8000644:	d106      	bne.n	8000654 <GPIO_PeriClock_Ctrl+0xac>
			GPIOG_PERI_CLK_EN();
 8000646:	4b43      	ldr	r3, [pc, #268]	; (8000754 <GPIO_PeriClock_Ctrl+0x1ac>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064a:	4a42      	ldr	r2, [pc, #264]	; (8000754 <GPIO_PeriClock_Ctrl+0x1ac>)
 800064c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000650:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000652:	e077      	b.n	8000744 <GPIO_PeriClock_Ctrl+0x19c>
		else if(pGPIOx == GPIOH)
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	4a46      	ldr	r2, [pc, #280]	; (8000770 <GPIO_PeriClock_Ctrl+0x1c8>)
 8000658:	4293      	cmp	r3, r2
 800065a:	d106      	bne.n	800066a <GPIO_PeriClock_Ctrl+0xc2>
			GPIOH_PERI_CLK_EN();
 800065c:	4b3d      	ldr	r3, [pc, #244]	; (8000754 <GPIO_PeriClock_Ctrl+0x1ac>)
 800065e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000660:	4a3c      	ldr	r2, [pc, #240]	; (8000754 <GPIO_PeriClock_Ctrl+0x1ac>)
 8000662:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000666:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000668:	e06c      	b.n	8000744 <GPIO_PeriClock_Ctrl+0x19c>
		else if(pGPIOx == GPIOI)
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	4a41      	ldr	r2, [pc, #260]	; (8000774 <GPIO_PeriClock_Ctrl+0x1cc>)
 800066e:	4293      	cmp	r3, r2
 8000670:	d168      	bne.n	8000744 <GPIO_PeriClock_Ctrl+0x19c>
			GPIOI_PERI_CLK_EN();
 8000672:	4b38      	ldr	r3, [pc, #224]	; (8000754 <GPIO_PeriClock_Ctrl+0x1ac>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000676:	4a37      	ldr	r2, [pc, #220]	; (8000754 <GPIO_PeriClock_Ctrl+0x1ac>)
 8000678:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800067c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800067e:	e061      	b.n	8000744 <GPIO_PeriClock_Ctrl+0x19c>
		if(pGPIOx == GPIOA)
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	4a33      	ldr	r2, [pc, #204]	; (8000750 <GPIO_PeriClock_Ctrl+0x1a8>)
 8000684:	4293      	cmp	r3, r2
 8000686:	d106      	bne.n	8000696 <GPIO_PeriClock_Ctrl+0xee>
			GPIOA_PERI_CLK_DI();
 8000688:	4b32      	ldr	r3, [pc, #200]	; (8000754 <GPIO_PeriClock_Ctrl+0x1ac>)
 800068a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068c:	4a31      	ldr	r2, [pc, #196]	; (8000754 <GPIO_PeriClock_Ctrl+0x1ac>)
 800068e:	f023 0301 	bic.w	r3, r3, #1
 8000692:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000694:	e056      	b.n	8000744 <GPIO_PeriClock_Ctrl+0x19c>
		else if(pGPIOx == GPIOB)
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	4a2f      	ldr	r2, [pc, #188]	; (8000758 <GPIO_PeriClock_Ctrl+0x1b0>)
 800069a:	4293      	cmp	r3, r2
 800069c:	d106      	bne.n	80006ac <GPIO_PeriClock_Ctrl+0x104>
			GPIOB_PERI_CLK_DI();
 800069e:	4b2d      	ldr	r3, [pc, #180]	; (8000754 <GPIO_PeriClock_Ctrl+0x1ac>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a2:	4a2c      	ldr	r2, [pc, #176]	; (8000754 <GPIO_PeriClock_Ctrl+0x1ac>)
 80006a4:	f023 0302 	bic.w	r3, r3, #2
 80006a8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80006aa:	e04b      	b.n	8000744 <GPIO_PeriClock_Ctrl+0x19c>
		else if(pGPIOx == GPIOC)
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	4a2b      	ldr	r2, [pc, #172]	; (800075c <GPIO_PeriClock_Ctrl+0x1b4>)
 80006b0:	4293      	cmp	r3, r2
 80006b2:	d106      	bne.n	80006c2 <GPIO_PeriClock_Ctrl+0x11a>
			GPIOC_PERI_CLK_DI();
 80006b4:	4b27      	ldr	r3, [pc, #156]	; (8000754 <GPIO_PeriClock_Ctrl+0x1ac>)
 80006b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b8:	4a26      	ldr	r2, [pc, #152]	; (8000754 <GPIO_PeriClock_Ctrl+0x1ac>)
 80006ba:	f023 0304 	bic.w	r3, r3, #4
 80006be:	6313      	str	r3, [r2, #48]	; 0x30
}
 80006c0:	e040      	b.n	8000744 <GPIO_PeriClock_Ctrl+0x19c>
		else if(pGPIOx == GPIOD)
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	4a26      	ldr	r2, [pc, #152]	; (8000760 <GPIO_PeriClock_Ctrl+0x1b8>)
 80006c6:	4293      	cmp	r3, r2
 80006c8:	d106      	bne.n	80006d8 <GPIO_PeriClock_Ctrl+0x130>
			GPIOD_PERI_CLK_DI();
 80006ca:	4b22      	ldr	r3, [pc, #136]	; (8000754 <GPIO_PeriClock_Ctrl+0x1ac>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ce:	4a21      	ldr	r2, [pc, #132]	; (8000754 <GPIO_PeriClock_Ctrl+0x1ac>)
 80006d0:	f023 0308 	bic.w	r3, r3, #8
 80006d4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80006d6:	e035      	b.n	8000744 <GPIO_PeriClock_Ctrl+0x19c>
		else if(pGPIOx == GPIOE)
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	4a22      	ldr	r2, [pc, #136]	; (8000764 <GPIO_PeriClock_Ctrl+0x1bc>)
 80006dc:	4293      	cmp	r3, r2
 80006de:	d106      	bne.n	80006ee <GPIO_PeriClock_Ctrl+0x146>
			GPIOE_PERI_CLK_DI();
 80006e0:	4b1c      	ldr	r3, [pc, #112]	; (8000754 <GPIO_PeriClock_Ctrl+0x1ac>)
 80006e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e4:	4a1b      	ldr	r2, [pc, #108]	; (8000754 <GPIO_PeriClock_Ctrl+0x1ac>)
 80006e6:	f023 0310 	bic.w	r3, r3, #16
 80006ea:	6313      	str	r3, [r2, #48]	; 0x30
}
 80006ec:	e02a      	b.n	8000744 <GPIO_PeriClock_Ctrl+0x19c>
		else if(pGPIOx == GPIOF)
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	4a1d      	ldr	r2, [pc, #116]	; (8000768 <GPIO_PeriClock_Ctrl+0x1c0>)
 80006f2:	4293      	cmp	r3, r2
 80006f4:	d106      	bne.n	8000704 <GPIO_PeriClock_Ctrl+0x15c>
			GPIOF_PERI_CLK_DI();
 80006f6:	4b17      	ldr	r3, [pc, #92]	; (8000754 <GPIO_PeriClock_Ctrl+0x1ac>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fa:	4a16      	ldr	r2, [pc, #88]	; (8000754 <GPIO_PeriClock_Ctrl+0x1ac>)
 80006fc:	f023 0320 	bic.w	r3, r3, #32
 8000700:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000702:	e01f      	b.n	8000744 <GPIO_PeriClock_Ctrl+0x19c>
		else if(pGPIOx == GPIOG)
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	4a19      	ldr	r2, [pc, #100]	; (800076c <GPIO_PeriClock_Ctrl+0x1c4>)
 8000708:	4293      	cmp	r3, r2
 800070a:	d106      	bne.n	800071a <GPIO_PeriClock_Ctrl+0x172>
			GPIOG_PERI_CLK_DI();
 800070c:	4b11      	ldr	r3, [pc, #68]	; (8000754 <GPIO_PeriClock_Ctrl+0x1ac>)
 800070e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000710:	4a10      	ldr	r2, [pc, #64]	; (8000754 <GPIO_PeriClock_Ctrl+0x1ac>)
 8000712:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000716:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000718:	e014      	b.n	8000744 <GPIO_PeriClock_Ctrl+0x19c>
		else if(pGPIOx == GPIOH)
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	4a14      	ldr	r2, [pc, #80]	; (8000770 <GPIO_PeriClock_Ctrl+0x1c8>)
 800071e:	4293      	cmp	r3, r2
 8000720:	d106      	bne.n	8000730 <GPIO_PeriClock_Ctrl+0x188>
			GPIOH_PERI_CLK_DI();
 8000722:	4b0c      	ldr	r3, [pc, #48]	; (8000754 <GPIO_PeriClock_Ctrl+0x1ac>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	4a0b      	ldr	r2, [pc, #44]	; (8000754 <GPIO_PeriClock_Ctrl+0x1ac>)
 8000728:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800072c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800072e:	e009      	b.n	8000744 <GPIO_PeriClock_Ctrl+0x19c>
		else if(pGPIOx == GPIOI)
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	4a10      	ldr	r2, [pc, #64]	; (8000774 <GPIO_PeriClock_Ctrl+0x1cc>)
 8000734:	4293      	cmp	r3, r2
 8000736:	d105      	bne.n	8000744 <GPIO_PeriClock_Ctrl+0x19c>
			GPIOI_PERI_CLK_DI();
 8000738:	4b06      	ldr	r3, [pc, #24]	; (8000754 <GPIO_PeriClock_Ctrl+0x1ac>)
 800073a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073c:	4a05      	ldr	r2, [pc, #20]	; (8000754 <GPIO_PeriClock_Ctrl+0x1ac>)
 800073e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000742:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000744:	bf00      	nop
 8000746:	370c      	adds	r7, #12
 8000748:	46bd      	mov	sp, r7
 800074a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074e:	4770      	bx	lr
 8000750:	40020000 	.word	0x40020000
 8000754:	40023800 	.word	0x40023800
 8000758:	40020400 	.word	0x40020400
 800075c:	40020800 	.word	0x40020800
 8000760:	40020c00 	.word	0x40020c00
 8000764:	40021000 	.word	0x40021000
 8000768:	40021400 	.word	0x40021400
 800076c:	40021800 	.word	0x40021800
 8000770:	40021c00 	.word	0x40021c00
 8000774:	40022000 	.word	0x40022000

08000778 <GPIO_ToggleOutputPin>:
 * Input Parameter 2 description : Pin Number
 * Return Type                   : None
 * Special Note                  : None
 */
void GPIO_ToggleOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)//to toggle the pin
{
 8000778:	b480      	push	{r7}
 800077a:	b083      	sub	sp, #12
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
 8000780:	460b      	mov	r3, r1
 8000782:	70fb      	strb	r3, [r7, #3]
	pGPIOx -> ODR ^= (1 << PinNumber);
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	695b      	ldr	r3, [r3, #20]
 8000788:	78fa      	ldrb	r2, [r7, #3]
 800078a:	2101      	movs	r1, #1
 800078c:	fa01 f202 	lsl.w	r2, r1, r2
 8000790:	405a      	eors	r2, r3
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	615a      	str	r2, [r3, #20]
}
 8000796:	bf00      	nop
 8000798:	370c      	adds	r7, #12
 800079a:	46bd      	mov	sp, r7
 800079c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a0:	4770      	bx	lr
	...

080007a4 <__libc_init_array>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	4d0d      	ldr	r5, [pc, #52]	; (80007dc <__libc_init_array+0x38>)
 80007a8:	4c0d      	ldr	r4, [pc, #52]	; (80007e0 <__libc_init_array+0x3c>)
 80007aa:	1b64      	subs	r4, r4, r5
 80007ac:	10a4      	asrs	r4, r4, #2
 80007ae:	2600      	movs	r6, #0
 80007b0:	42a6      	cmp	r6, r4
 80007b2:	d109      	bne.n	80007c8 <__libc_init_array+0x24>
 80007b4:	4d0b      	ldr	r5, [pc, #44]	; (80007e4 <__libc_init_array+0x40>)
 80007b6:	4c0c      	ldr	r4, [pc, #48]	; (80007e8 <__libc_init_array+0x44>)
 80007b8:	f000 f818 	bl	80007ec <_init>
 80007bc:	1b64      	subs	r4, r4, r5
 80007be:	10a4      	asrs	r4, r4, #2
 80007c0:	2600      	movs	r6, #0
 80007c2:	42a6      	cmp	r6, r4
 80007c4:	d105      	bne.n	80007d2 <__libc_init_array+0x2e>
 80007c6:	bd70      	pop	{r4, r5, r6, pc}
 80007c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80007cc:	4798      	blx	r3
 80007ce:	3601      	adds	r6, #1
 80007d0:	e7ee      	b.n	80007b0 <__libc_init_array+0xc>
 80007d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80007d6:	4798      	blx	r3
 80007d8:	3601      	adds	r6, #1
 80007da:	e7f2      	b.n	80007c2 <__libc_init_array+0x1e>
 80007dc:	08000804 	.word	0x08000804
 80007e0:	08000804 	.word	0x08000804
 80007e4:	08000804 	.word	0x08000804
 80007e8:	08000808 	.word	0x08000808

080007ec <_init>:
 80007ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007ee:	bf00      	nop
 80007f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80007f2:	bc08      	pop	{r3}
 80007f4:	469e      	mov	lr, r3
 80007f6:	4770      	bx	lr

080007f8 <_fini>:
 80007f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007fa:	bf00      	nop
 80007fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80007fe:	bc08      	pop	{r3}
 8000800:	469e      	mov	lr, r3
 8000802:	4770      	bx	lr
