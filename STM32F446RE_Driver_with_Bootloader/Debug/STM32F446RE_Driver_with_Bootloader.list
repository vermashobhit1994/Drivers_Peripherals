
STM32F446RE_Driver_with_Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000d3c  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  08000f00  08000f00  00010f00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000fb0  08000fb0  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08000fb0  08000fb0  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000fb0  08000fb0  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000fb0  08000fb0  00010fb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000fb4  08000fb4  00010fb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08000fb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000038  20000064  0800101c  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000009c  0800101c  0002009c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   000026ef  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000006a7  00000000  00000000  00022783  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000130  00000000  00000000  00022e30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000000f8  00000000  00000000  00022f60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002cb7  00000000  00000000  00023058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001490  00000000  00000000  00025d0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000a468  00000000  00000000  0002719f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00031607  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000a64  00000000  00000000  0003165c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000064 	.word	0x20000064
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000ee8 	.word	0x08000ee8

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000068 	.word	0x20000068
 8000200:	08000ee8 	.word	0x08000ee8

08000204 <bootloader_jump_to_user_app>:
   __asm volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
}


static void bootloader_jump_to_user_app(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	b086      	sub	sp, #24
 8000208:	af00      	add	r7, sp, #0
	//print the statement for debugging
	printf("Bootloader is jumping to user application\n");
#endif
	/*Configure the MSP that earlier is pointing to Bootloader start address and
	 * now configuring it to user application start address */
const int FLASH_SECTOR0_BASE_ADDR = 0x08000000;
 800020a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800020e:	617b      	str	r3, [r7, #20]
	uint32_t msp_value = *(volatile uint32_t*)FLASH_SECTOR0_BASE_ADDR;
 8000210:	697b      	ldr	r3, [r7, #20]
 8000212:	681b      	ldr	r3, [r3, #0]
 8000214:	613b      	str	r3, [r7, #16]
 8000216:	693b      	ldr	r3, [r7, #16]
 8000218:	607b      	str	r3, [r7, #4]
   __asm volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	f383 8808 	msr	MSP, r3
}
 8000220:	bf00      	nop
	//Set the MSP to user application start address
	__set_MSP(msp_value);

	//Step2 : configure the user application reset handler address to function pointer.
	//First getting the address of reset handler and then assign it to function pointer.
	uint32_t user_app_reset_addr = *(volatile uint32_t*)(FLASH_SECTOR1_BASE_ADDR+4);
 8000222:	4b05      	ldr	r3, [pc, #20]	; (8000238 <bootloader_jump_to_user_app+0x34>)
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	60fb      	str	r3, [r7, #12]

	//Function pointer declaration that store User application Reset Handler address.
	void (*app_reset_handler) (void);
	app_reset_handler = (void*)user_app_reset_addr;
 8000228:	68fb      	ldr	r3, [r7, #12]
 800022a:	60bb      	str	r3, [r7, #8]
#ifdef __DEBUG__
	printf("App reset handler is %lu\n",(uint32_t)app_reset_handler);
#endif

	//Step3 : Jump to reset handler of user application
	app_reset_handler();
 800022c:	68bb      	ldr	r3, [r7, #8]
 800022e:	4798      	blx	r3




}
 8000230:	bf00      	nop
 8000232:	3718      	adds	r7, #24
 8000234:	46bd      	mov	sp, r7
 8000236:	bd80      	pop	{r7, pc}
 8000238:	08004004 	.word	0x08004004

0800023c <Button_Init>:


void Button_Init()
{
 800023c:	b480      	push	{r7}
 800023e:	af00      	add	r7, sp, #0
	//Enable the peripheral clock for GPIOC
	GPIOC_PERI_CLK_EN();
 8000240:	4b0b      	ldr	r3, [pc, #44]	; (8000270 <Button_Init+0x34>)
 8000242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000244:	4a0a      	ldr	r2, [pc, #40]	; (8000270 <Button_Init+0x34>)
 8000246:	f043 0304 	orr.w	r3, r3, #4
 800024a:	6313      	str	r3, [r2, #48]	; 0x30

	//configure the mode as input mode
	GPIOC -> GPIOx_MODER &= ~(0x3 << (2 * BUTTON_PIN_NO));
 800024c:	4b09      	ldr	r3, [pc, #36]	; (8000274 <Button_Init+0x38>)
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	4a08      	ldr	r2, [pc, #32]	; (8000274 <Button_Init+0x38>)
 8000252:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8000256:	6013      	str	r3, [r2, #0]

	//Turn ON Pull up
	GPIOC -> GPIOx_PUPDR |= (1 << (2*BUTTON_PIN_NO));
 8000258:	4b06      	ldr	r3, [pc, #24]	; (8000274 <Button_Init+0x38>)
 800025a:	68db      	ldr	r3, [r3, #12]
 800025c:	4a05      	ldr	r2, [pc, #20]	; (8000274 <Button_Init+0x38>)
 800025e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000262:	60d3      	str	r3, [r2, #12]


}
 8000264:	bf00      	nop
 8000266:	46bd      	mov	sp, r7
 8000268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop
 8000270:	40023800 	.word	0x40023800
 8000274:	40020800 	.word	0x40020800

08000278 <LED_Init>:

void LED_Init()
{
 8000278:	b480      	push	{r7}
 800027a:	af00      	add	r7, sp, #0
	//Enable the Peripheral clock for GPIOA
	GPIOA_PERI_CLK_EN();
 800027c:	4b08      	ldr	r3, [pc, #32]	; (80002a0 <LED_Init+0x28>)
 800027e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000280:	4a07      	ldr	r2, [pc, #28]	; (80002a0 <LED_Init+0x28>)
 8000282:	f043 0301 	orr.w	r3, r3, #1
 8000286:	6313      	str	r3, [r2, #48]	; 0x30

	//Setting the mode for PA5 as output mode
	GPIOA -> GPIOx_MODER |= (1 << (2 * LED_PIN_NO));
 8000288:	4b06      	ldr	r3, [pc, #24]	; (80002a4 <LED_Init+0x2c>)
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	4a05      	ldr	r2, [pc, #20]	; (80002a4 <LED_Init+0x2c>)
 800028e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000292:	6013      	str	r3, [r2, #0]

}
 8000294:	bf00      	nop
 8000296:	46bd      	mov	sp, r7
 8000298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop
 80002a0:	40023800 	.word	0x40023800
 80002a4:	40020000 	.word	0x40020000

080002a8 <main>:



/*main function for bootloader */
int main(void)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b082      	sub	sp, #8
 80002ac:	af00      	add	r7, sp, #0

	Button_Init();
 80002ae:	f7ff ffc5 	bl	800023c <Button_Init>


	LED_Init();
 80002b2:	f7ff ffe1 	bl	8000278 <LED_Init>


	for(int i = 0;i<500000;i++)
 80002b6:	2300      	movs	r3, #0
 80002b8:	607b      	str	r3, [r7, #4]
 80002ba:	e002      	b.n	80002c2 <main+0x1a>
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	3301      	adds	r3, #1
 80002c0:	607b      	str	r3, [r7, #4]
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	4a0c      	ldr	r2, [pc, #48]	; (80002f8 <main+0x50>)
 80002c6:	4293      	cmp	r3, r2
 80002c8:	ddf8      	ble.n	80002bc <main+0x14>


	/* If button is pressed then only jumps to bootloader which can happen when
	 * Falling edge trigger is done on button.
	 */
	if( !(GPIOC -> GPIOx_IDR & (1 << BUTTON_PIN_NO )) )
 80002ca:	4b0c      	ldr	r3, [pc, #48]	; (80002fc <main+0x54>)
 80002cc:	691b      	ldr	r3, [r3, #16]
 80002ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d109      	bne.n	80002ea <main+0x42>
	{
		printf("Going to Bootloder mode since button is pressed\n");
 80002d6:	480a      	ldr	r0, [pc, #40]	; (8000300 <main+0x58>)
 80002d8:	f000 f9ae 	bl	8000638 <puts>



		while(1)
			GPIOA -> GPIOx_ODR |= (1 << LED_PIN_NO);
 80002dc:	4b09      	ldr	r3, [pc, #36]	; (8000304 <main+0x5c>)
 80002de:	695b      	ldr	r3, [r3, #20]
 80002e0:	4a08      	ldr	r2, [pc, #32]	; (8000304 <main+0x5c>)
 80002e2:	f043 0320 	orr.w	r3, r3, #32
 80002e6:	6153      	str	r3, [r2, #20]
 80002e8:	e7f8      	b.n	80002dc <main+0x34>


	}
	else
	{
		printf("Going to Application mode\n");
 80002ea:	4807      	ldr	r0, [pc, #28]	; (8000308 <main+0x60>)
 80002ec:	f000 f9a4 	bl	8000638 <puts>
		bootloader_jump_to_user_app();
 80002f0:	f7ff ff88 	bl	8000204 <bootloader_jump_to_user_app>

		//the below statement should never gets executed if user application has started
		while(1);
 80002f4:	e7fe      	b.n	80002f4 <main+0x4c>
 80002f6:	bf00      	nop
 80002f8:	0007a11f 	.word	0x0007a11f
 80002fc:	40020800 	.word	0x40020800
 8000300:	08000f00 	.word	0x08000f00
 8000304:	40020000 	.word	0x40020000
 8000308:	08000f30 	.word	0x08000f30

0800030c <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 800030c:	b480      	push	{r7}
 800030e:	b083      	sub	sp, #12
 8000310:	af00      	add	r7, sp, #0
 8000312:	4603      	mov	r3, r0
 8000314:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8000316:	4b0f      	ldr	r3, [pc, #60]	; (8000354 <ITM_SendChar+0x48>)
 8000318:	681b      	ldr	r3, [r3, #0]
 800031a:	4a0e      	ldr	r2, [pc, #56]	; (8000354 <ITM_SendChar+0x48>)
 800031c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000320:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8000322:	4b0d      	ldr	r3, [pc, #52]	; (8000358 <ITM_SendChar+0x4c>)
 8000324:	681b      	ldr	r3, [r3, #0]
 8000326:	4a0c      	ldr	r2, [pc, #48]	; (8000358 <ITM_SendChar+0x4c>)
 8000328:	f043 0301 	orr.w	r3, r3, #1
 800032c:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 800032e:	bf00      	nop
 8000330:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	f003 0301 	and.w	r3, r3, #1
 800033a:	2b00      	cmp	r3, #0
 800033c:	d0f8      	beq.n	8000330 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 800033e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8000342:	79fb      	ldrb	r3, [r7, #7]
 8000344:	6013      	str	r3, [r2, #0]
}
 8000346:	bf00      	nop
 8000348:	370c      	adds	r7, #12
 800034a:	46bd      	mov	sp, r7
 800034c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000350:	4770      	bx	lr
 8000352:	bf00      	nop
 8000354:	e000edfc 	.word	0xe000edfc
 8000358:	e0000e00 	.word	0xe0000e00

0800035c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	b086      	sub	sp, #24
 8000360:	af00      	add	r7, sp, #0
 8000362:	60f8      	str	r0, [r7, #12]
 8000364:	60b9      	str	r1, [r7, #8]
 8000366:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000368:	2300      	movs	r3, #0
 800036a:	617b      	str	r3, [r7, #20]
 800036c:	e00a      	b.n	8000384 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800036e:	f3af 8000 	nop.w
 8000372:	4601      	mov	r1, r0
 8000374:	68bb      	ldr	r3, [r7, #8]
 8000376:	1c5a      	adds	r2, r3, #1
 8000378:	60ba      	str	r2, [r7, #8]
 800037a:	b2ca      	uxtb	r2, r1
 800037c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800037e:	697b      	ldr	r3, [r7, #20]
 8000380:	3301      	adds	r3, #1
 8000382:	617b      	str	r3, [r7, #20]
 8000384:	697a      	ldr	r2, [r7, #20]
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	429a      	cmp	r2, r3
 800038a:	dbf0      	blt.n	800036e <_read+0x12>
	}

return len;
 800038c:	687b      	ldr	r3, [r7, #4]
}
 800038e:	4618      	mov	r0, r3
 8000390:	3718      	adds	r7, #24
 8000392:	46bd      	mov	sp, r7
 8000394:	bd80      	pop	{r7, pc}

08000396 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000396:	b580      	push	{r7, lr}
 8000398:	b086      	sub	sp, #24
 800039a:	af00      	add	r7, sp, #0
 800039c:	60f8      	str	r0, [r7, #12]
 800039e:	60b9      	str	r1, [r7, #8]
 80003a0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003a2:	2300      	movs	r3, #0
 80003a4:	617b      	str	r3, [r7, #20]
 80003a6:	e009      	b.n	80003bc <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 80003a8:	68bb      	ldr	r3, [r7, #8]
 80003aa:	1c5a      	adds	r2, r3, #1
 80003ac:	60ba      	str	r2, [r7, #8]
 80003ae:	781b      	ldrb	r3, [r3, #0]
 80003b0:	4618      	mov	r0, r3
 80003b2:	f7ff ffab 	bl	800030c <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003b6:	697b      	ldr	r3, [r7, #20]
 80003b8:	3301      	adds	r3, #1
 80003ba:	617b      	str	r3, [r7, #20]
 80003bc:	697a      	ldr	r2, [r7, #20]
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	429a      	cmp	r2, r3
 80003c2:	dbf1      	blt.n	80003a8 <_write+0x12>
	}
	return len;
 80003c4:	687b      	ldr	r3, [r7, #4]
}
 80003c6:	4618      	mov	r0, r3
 80003c8:	3718      	adds	r7, #24
 80003ca:	46bd      	mov	sp, r7
 80003cc:	bd80      	pop	{r7, pc}

080003ce <_close>:

int _close(int file)
{
 80003ce:	b480      	push	{r7}
 80003d0:	b083      	sub	sp, #12
 80003d2:	af00      	add	r7, sp, #0
 80003d4:	6078      	str	r0, [r7, #4]
	return -1;
 80003d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80003da:	4618      	mov	r0, r3
 80003dc:	370c      	adds	r7, #12
 80003de:	46bd      	mov	sp, r7
 80003e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e4:	4770      	bx	lr

080003e6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80003e6:	b480      	push	{r7}
 80003e8:	b083      	sub	sp, #12
 80003ea:	af00      	add	r7, sp, #0
 80003ec:	6078      	str	r0, [r7, #4]
 80003ee:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80003f0:	683b      	ldr	r3, [r7, #0]
 80003f2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80003f6:	605a      	str	r2, [r3, #4]
	return 0;
 80003f8:	2300      	movs	r3, #0
}
 80003fa:	4618      	mov	r0, r3
 80003fc:	370c      	adds	r7, #12
 80003fe:	46bd      	mov	sp, r7
 8000400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000404:	4770      	bx	lr

08000406 <_isatty>:

int _isatty(int file)
{
 8000406:	b480      	push	{r7}
 8000408:	b083      	sub	sp, #12
 800040a:	af00      	add	r7, sp, #0
 800040c:	6078      	str	r0, [r7, #4]
	return 1;
 800040e:	2301      	movs	r3, #1
}
 8000410:	4618      	mov	r0, r3
 8000412:	370c      	adds	r7, #12
 8000414:	46bd      	mov	sp, r7
 8000416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800041a:	4770      	bx	lr

0800041c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800041c:	b480      	push	{r7}
 800041e:	b085      	sub	sp, #20
 8000420:	af00      	add	r7, sp, #0
 8000422:	60f8      	str	r0, [r7, #12]
 8000424:	60b9      	str	r1, [r7, #8]
 8000426:	607a      	str	r2, [r7, #4]
	return 0;
 8000428:	2300      	movs	r3, #0
}
 800042a:	4618      	mov	r0, r3
 800042c:	3714      	adds	r7, #20
 800042e:	46bd      	mov	sp, r7
 8000430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000434:	4770      	bx	lr
	...

08000438 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	b086      	sub	sp, #24
 800043c:	af00      	add	r7, sp, #0
 800043e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000440:	4a14      	ldr	r2, [pc, #80]	; (8000494 <_sbrk+0x5c>)
 8000442:	4b15      	ldr	r3, [pc, #84]	; (8000498 <_sbrk+0x60>)
 8000444:	1ad3      	subs	r3, r2, r3
 8000446:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000448:	697b      	ldr	r3, [r7, #20]
 800044a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800044c:	4b13      	ldr	r3, [pc, #76]	; (800049c <_sbrk+0x64>)
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	2b00      	cmp	r3, #0
 8000452:	d102      	bne.n	800045a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000454:	4b11      	ldr	r3, [pc, #68]	; (800049c <_sbrk+0x64>)
 8000456:	4a12      	ldr	r2, [pc, #72]	; (80004a0 <_sbrk+0x68>)
 8000458:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800045a:	4b10      	ldr	r3, [pc, #64]	; (800049c <_sbrk+0x64>)
 800045c:	681a      	ldr	r2, [r3, #0]
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	4413      	add	r3, r2
 8000462:	693a      	ldr	r2, [r7, #16]
 8000464:	429a      	cmp	r2, r3
 8000466:	d207      	bcs.n	8000478 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000468:	f000 f846 	bl	80004f8 <__errno>
 800046c:	4603      	mov	r3, r0
 800046e:	220c      	movs	r2, #12
 8000470:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000472:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000476:	e009      	b.n	800048c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000478:	4b08      	ldr	r3, [pc, #32]	; (800049c <_sbrk+0x64>)
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800047e:	4b07      	ldr	r3, [pc, #28]	; (800049c <_sbrk+0x64>)
 8000480:	681a      	ldr	r2, [r3, #0]
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	4413      	add	r3, r2
 8000486:	4a05      	ldr	r2, [pc, #20]	; (800049c <_sbrk+0x64>)
 8000488:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800048a:	68fb      	ldr	r3, [r7, #12]
}
 800048c:	4618      	mov	r0, r3
 800048e:	3718      	adds	r7, #24
 8000490:	46bd      	mov	sp, r7
 8000492:	bd80      	pop	{r7, pc}
 8000494:	20020000 	.word	0x20020000
 8000498:	00000400 	.word	0x00000400
 800049c:	20000080 	.word	0x20000080
 80004a0:	200000a0 	.word	0x200000a0

080004a4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80004a4:	480d      	ldr	r0, [pc, #52]	; (80004dc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80004a6:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80004a8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004ac:	480c      	ldr	r0, [pc, #48]	; (80004e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80004ae:	490d      	ldr	r1, [pc, #52]	; (80004e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80004b0:	4a0d      	ldr	r2, [pc, #52]	; (80004e8 <LoopForever+0xe>)
  movs r3, #0
 80004b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004b4:	e002      	b.n	80004bc <LoopCopyDataInit>

080004b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004ba:	3304      	adds	r3, #4

080004bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004c0:	d3f9      	bcc.n	80004b6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004c2:	4a0a      	ldr	r2, [pc, #40]	; (80004ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80004c4:	4c0a      	ldr	r4, [pc, #40]	; (80004f0 <LoopForever+0x16>)
  movs r3, #0
 80004c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004c8:	e001      	b.n	80004ce <LoopFillZerobss>

080004ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004cc:	3204      	adds	r2, #4

080004ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004d0:	d3fb      	bcc.n	80004ca <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80004d2:	f000 f817 	bl	8000504 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004d6:	f7ff fee7 	bl	80002a8 <main>

080004da <LoopForever>:

LoopForever:
    b LoopForever
 80004da:	e7fe      	b.n	80004da <LoopForever>
  ldr   r0, =_estack
 80004dc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80004e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004e4:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80004e8:	08000fb8 	.word	0x08000fb8
  ldr r2, =_sbss
 80004ec:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 80004f0:	2000009c 	.word	0x2000009c

080004f4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004f4:	e7fe      	b.n	80004f4 <ADC_IRQHandler>
	...

080004f8 <__errno>:
 80004f8:	4b01      	ldr	r3, [pc, #4]	; (8000500 <__errno+0x8>)
 80004fa:	6818      	ldr	r0, [r3, #0]
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop
 8000500:	20000000 	.word	0x20000000

08000504 <__libc_init_array>:
 8000504:	b570      	push	{r4, r5, r6, lr}
 8000506:	4d0d      	ldr	r5, [pc, #52]	; (800053c <__libc_init_array+0x38>)
 8000508:	4c0d      	ldr	r4, [pc, #52]	; (8000540 <__libc_init_array+0x3c>)
 800050a:	1b64      	subs	r4, r4, r5
 800050c:	10a4      	asrs	r4, r4, #2
 800050e:	2600      	movs	r6, #0
 8000510:	42a6      	cmp	r6, r4
 8000512:	d109      	bne.n	8000528 <__libc_init_array+0x24>
 8000514:	4d0b      	ldr	r5, [pc, #44]	; (8000544 <__libc_init_array+0x40>)
 8000516:	4c0c      	ldr	r4, [pc, #48]	; (8000548 <__libc_init_array+0x44>)
 8000518:	f000 fce6 	bl	8000ee8 <_init>
 800051c:	1b64      	subs	r4, r4, r5
 800051e:	10a4      	asrs	r4, r4, #2
 8000520:	2600      	movs	r6, #0
 8000522:	42a6      	cmp	r6, r4
 8000524:	d105      	bne.n	8000532 <__libc_init_array+0x2e>
 8000526:	bd70      	pop	{r4, r5, r6, pc}
 8000528:	f855 3b04 	ldr.w	r3, [r5], #4
 800052c:	4798      	blx	r3
 800052e:	3601      	adds	r6, #1
 8000530:	e7ee      	b.n	8000510 <__libc_init_array+0xc>
 8000532:	f855 3b04 	ldr.w	r3, [r5], #4
 8000536:	4798      	blx	r3
 8000538:	3601      	adds	r6, #1
 800053a:	e7f2      	b.n	8000522 <__libc_init_array+0x1e>
 800053c:	08000fb0 	.word	0x08000fb0
 8000540:	08000fb0 	.word	0x08000fb0
 8000544:	08000fb0 	.word	0x08000fb0
 8000548:	08000fb4 	.word	0x08000fb4

0800054c <memset>:
 800054c:	4402      	add	r2, r0
 800054e:	4603      	mov	r3, r0
 8000550:	4293      	cmp	r3, r2
 8000552:	d100      	bne.n	8000556 <memset+0xa>
 8000554:	4770      	bx	lr
 8000556:	f803 1b01 	strb.w	r1, [r3], #1
 800055a:	e7f9      	b.n	8000550 <memset+0x4>

0800055c <_puts_r>:
 800055c:	b570      	push	{r4, r5, r6, lr}
 800055e:	460e      	mov	r6, r1
 8000560:	4605      	mov	r5, r0
 8000562:	b118      	cbz	r0, 800056c <_puts_r+0x10>
 8000564:	6983      	ldr	r3, [r0, #24]
 8000566:	b90b      	cbnz	r3, 800056c <_puts_r+0x10>
 8000568:	f000 fa48 	bl	80009fc <__sinit>
 800056c:	69ab      	ldr	r3, [r5, #24]
 800056e:	68ac      	ldr	r4, [r5, #8]
 8000570:	b913      	cbnz	r3, 8000578 <_puts_r+0x1c>
 8000572:	4628      	mov	r0, r5
 8000574:	f000 fa42 	bl	80009fc <__sinit>
 8000578:	4b2c      	ldr	r3, [pc, #176]	; (800062c <_puts_r+0xd0>)
 800057a:	429c      	cmp	r4, r3
 800057c:	d120      	bne.n	80005c0 <_puts_r+0x64>
 800057e:	686c      	ldr	r4, [r5, #4]
 8000580:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000582:	07db      	lsls	r3, r3, #31
 8000584:	d405      	bmi.n	8000592 <_puts_r+0x36>
 8000586:	89a3      	ldrh	r3, [r4, #12]
 8000588:	0598      	lsls	r0, r3, #22
 800058a:	d402      	bmi.n	8000592 <_puts_r+0x36>
 800058c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800058e:	f000 fad3 	bl	8000b38 <__retarget_lock_acquire_recursive>
 8000592:	89a3      	ldrh	r3, [r4, #12]
 8000594:	0719      	lsls	r1, r3, #28
 8000596:	d51d      	bpl.n	80005d4 <_puts_r+0x78>
 8000598:	6923      	ldr	r3, [r4, #16]
 800059a:	b1db      	cbz	r3, 80005d4 <_puts_r+0x78>
 800059c:	3e01      	subs	r6, #1
 800059e:	68a3      	ldr	r3, [r4, #8]
 80005a0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80005a4:	3b01      	subs	r3, #1
 80005a6:	60a3      	str	r3, [r4, #8]
 80005a8:	bb39      	cbnz	r1, 80005fa <_puts_r+0x9e>
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	da38      	bge.n	8000620 <_puts_r+0xc4>
 80005ae:	4622      	mov	r2, r4
 80005b0:	210a      	movs	r1, #10
 80005b2:	4628      	mov	r0, r5
 80005b4:	f000 f848 	bl	8000648 <__swbuf_r>
 80005b8:	3001      	adds	r0, #1
 80005ba:	d011      	beq.n	80005e0 <_puts_r+0x84>
 80005bc:	250a      	movs	r5, #10
 80005be:	e011      	b.n	80005e4 <_puts_r+0x88>
 80005c0:	4b1b      	ldr	r3, [pc, #108]	; (8000630 <_puts_r+0xd4>)
 80005c2:	429c      	cmp	r4, r3
 80005c4:	d101      	bne.n	80005ca <_puts_r+0x6e>
 80005c6:	68ac      	ldr	r4, [r5, #8]
 80005c8:	e7da      	b.n	8000580 <_puts_r+0x24>
 80005ca:	4b1a      	ldr	r3, [pc, #104]	; (8000634 <_puts_r+0xd8>)
 80005cc:	429c      	cmp	r4, r3
 80005ce:	bf08      	it	eq
 80005d0:	68ec      	ldreq	r4, [r5, #12]
 80005d2:	e7d5      	b.n	8000580 <_puts_r+0x24>
 80005d4:	4621      	mov	r1, r4
 80005d6:	4628      	mov	r0, r5
 80005d8:	f000 f888 	bl	80006ec <__swsetup_r>
 80005dc:	2800      	cmp	r0, #0
 80005de:	d0dd      	beq.n	800059c <_puts_r+0x40>
 80005e0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80005e4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80005e6:	07da      	lsls	r2, r3, #31
 80005e8:	d405      	bmi.n	80005f6 <_puts_r+0x9a>
 80005ea:	89a3      	ldrh	r3, [r4, #12]
 80005ec:	059b      	lsls	r3, r3, #22
 80005ee:	d402      	bmi.n	80005f6 <_puts_r+0x9a>
 80005f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80005f2:	f000 faa2 	bl	8000b3a <__retarget_lock_release_recursive>
 80005f6:	4628      	mov	r0, r5
 80005f8:	bd70      	pop	{r4, r5, r6, pc}
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	da04      	bge.n	8000608 <_puts_r+0xac>
 80005fe:	69a2      	ldr	r2, [r4, #24]
 8000600:	429a      	cmp	r2, r3
 8000602:	dc06      	bgt.n	8000612 <_puts_r+0xb6>
 8000604:	290a      	cmp	r1, #10
 8000606:	d004      	beq.n	8000612 <_puts_r+0xb6>
 8000608:	6823      	ldr	r3, [r4, #0]
 800060a:	1c5a      	adds	r2, r3, #1
 800060c:	6022      	str	r2, [r4, #0]
 800060e:	7019      	strb	r1, [r3, #0]
 8000610:	e7c5      	b.n	800059e <_puts_r+0x42>
 8000612:	4622      	mov	r2, r4
 8000614:	4628      	mov	r0, r5
 8000616:	f000 f817 	bl	8000648 <__swbuf_r>
 800061a:	3001      	adds	r0, #1
 800061c:	d1bf      	bne.n	800059e <_puts_r+0x42>
 800061e:	e7df      	b.n	80005e0 <_puts_r+0x84>
 8000620:	6823      	ldr	r3, [r4, #0]
 8000622:	250a      	movs	r5, #10
 8000624:	1c5a      	adds	r2, r3, #1
 8000626:	6022      	str	r2, [r4, #0]
 8000628:	701d      	strb	r5, [r3, #0]
 800062a:	e7db      	b.n	80005e4 <_puts_r+0x88>
 800062c:	08000f70 	.word	0x08000f70
 8000630:	08000f90 	.word	0x08000f90
 8000634:	08000f50 	.word	0x08000f50

08000638 <puts>:
 8000638:	4b02      	ldr	r3, [pc, #8]	; (8000644 <puts+0xc>)
 800063a:	4601      	mov	r1, r0
 800063c:	6818      	ldr	r0, [r3, #0]
 800063e:	f7ff bf8d 	b.w	800055c <_puts_r>
 8000642:	bf00      	nop
 8000644:	20000000 	.word	0x20000000

08000648 <__swbuf_r>:
 8000648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800064a:	460e      	mov	r6, r1
 800064c:	4614      	mov	r4, r2
 800064e:	4605      	mov	r5, r0
 8000650:	b118      	cbz	r0, 800065a <__swbuf_r+0x12>
 8000652:	6983      	ldr	r3, [r0, #24]
 8000654:	b90b      	cbnz	r3, 800065a <__swbuf_r+0x12>
 8000656:	f000 f9d1 	bl	80009fc <__sinit>
 800065a:	4b21      	ldr	r3, [pc, #132]	; (80006e0 <__swbuf_r+0x98>)
 800065c:	429c      	cmp	r4, r3
 800065e:	d12b      	bne.n	80006b8 <__swbuf_r+0x70>
 8000660:	686c      	ldr	r4, [r5, #4]
 8000662:	69a3      	ldr	r3, [r4, #24]
 8000664:	60a3      	str	r3, [r4, #8]
 8000666:	89a3      	ldrh	r3, [r4, #12]
 8000668:	071a      	lsls	r2, r3, #28
 800066a:	d52f      	bpl.n	80006cc <__swbuf_r+0x84>
 800066c:	6923      	ldr	r3, [r4, #16]
 800066e:	b36b      	cbz	r3, 80006cc <__swbuf_r+0x84>
 8000670:	6923      	ldr	r3, [r4, #16]
 8000672:	6820      	ldr	r0, [r4, #0]
 8000674:	1ac0      	subs	r0, r0, r3
 8000676:	6963      	ldr	r3, [r4, #20]
 8000678:	b2f6      	uxtb	r6, r6
 800067a:	4283      	cmp	r3, r0
 800067c:	4637      	mov	r7, r6
 800067e:	dc04      	bgt.n	800068a <__swbuf_r+0x42>
 8000680:	4621      	mov	r1, r4
 8000682:	4628      	mov	r0, r5
 8000684:	f000 f926 	bl	80008d4 <_fflush_r>
 8000688:	bb30      	cbnz	r0, 80006d8 <__swbuf_r+0x90>
 800068a:	68a3      	ldr	r3, [r4, #8]
 800068c:	3b01      	subs	r3, #1
 800068e:	60a3      	str	r3, [r4, #8]
 8000690:	6823      	ldr	r3, [r4, #0]
 8000692:	1c5a      	adds	r2, r3, #1
 8000694:	6022      	str	r2, [r4, #0]
 8000696:	701e      	strb	r6, [r3, #0]
 8000698:	6963      	ldr	r3, [r4, #20]
 800069a:	3001      	adds	r0, #1
 800069c:	4283      	cmp	r3, r0
 800069e:	d004      	beq.n	80006aa <__swbuf_r+0x62>
 80006a0:	89a3      	ldrh	r3, [r4, #12]
 80006a2:	07db      	lsls	r3, r3, #31
 80006a4:	d506      	bpl.n	80006b4 <__swbuf_r+0x6c>
 80006a6:	2e0a      	cmp	r6, #10
 80006a8:	d104      	bne.n	80006b4 <__swbuf_r+0x6c>
 80006aa:	4621      	mov	r1, r4
 80006ac:	4628      	mov	r0, r5
 80006ae:	f000 f911 	bl	80008d4 <_fflush_r>
 80006b2:	b988      	cbnz	r0, 80006d8 <__swbuf_r+0x90>
 80006b4:	4638      	mov	r0, r7
 80006b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80006b8:	4b0a      	ldr	r3, [pc, #40]	; (80006e4 <__swbuf_r+0x9c>)
 80006ba:	429c      	cmp	r4, r3
 80006bc:	d101      	bne.n	80006c2 <__swbuf_r+0x7a>
 80006be:	68ac      	ldr	r4, [r5, #8]
 80006c0:	e7cf      	b.n	8000662 <__swbuf_r+0x1a>
 80006c2:	4b09      	ldr	r3, [pc, #36]	; (80006e8 <__swbuf_r+0xa0>)
 80006c4:	429c      	cmp	r4, r3
 80006c6:	bf08      	it	eq
 80006c8:	68ec      	ldreq	r4, [r5, #12]
 80006ca:	e7ca      	b.n	8000662 <__swbuf_r+0x1a>
 80006cc:	4621      	mov	r1, r4
 80006ce:	4628      	mov	r0, r5
 80006d0:	f000 f80c 	bl	80006ec <__swsetup_r>
 80006d4:	2800      	cmp	r0, #0
 80006d6:	d0cb      	beq.n	8000670 <__swbuf_r+0x28>
 80006d8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80006dc:	e7ea      	b.n	80006b4 <__swbuf_r+0x6c>
 80006de:	bf00      	nop
 80006e0:	08000f70 	.word	0x08000f70
 80006e4:	08000f90 	.word	0x08000f90
 80006e8:	08000f50 	.word	0x08000f50

080006ec <__swsetup_r>:
 80006ec:	4b32      	ldr	r3, [pc, #200]	; (80007b8 <__swsetup_r+0xcc>)
 80006ee:	b570      	push	{r4, r5, r6, lr}
 80006f0:	681d      	ldr	r5, [r3, #0]
 80006f2:	4606      	mov	r6, r0
 80006f4:	460c      	mov	r4, r1
 80006f6:	b125      	cbz	r5, 8000702 <__swsetup_r+0x16>
 80006f8:	69ab      	ldr	r3, [r5, #24]
 80006fa:	b913      	cbnz	r3, 8000702 <__swsetup_r+0x16>
 80006fc:	4628      	mov	r0, r5
 80006fe:	f000 f97d 	bl	80009fc <__sinit>
 8000702:	4b2e      	ldr	r3, [pc, #184]	; (80007bc <__swsetup_r+0xd0>)
 8000704:	429c      	cmp	r4, r3
 8000706:	d10f      	bne.n	8000728 <__swsetup_r+0x3c>
 8000708:	686c      	ldr	r4, [r5, #4]
 800070a:	89a3      	ldrh	r3, [r4, #12]
 800070c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000710:	0719      	lsls	r1, r3, #28
 8000712:	d42c      	bmi.n	800076e <__swsetup_r+0x82>
 8000714:	06dd      	lsls	r5, r3, #27
 8000716:	d411      	bmi.n	800073c <__swsetup_r+0x50>
 8000718:	2309      	movs	r3, #9
 800071a:	6033      	str	r3, [r6, #0]
 800071c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8000720:	81a3      	strh	r3, [r4, #12]
 8000722:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000726:	e03e      	b.n	80007a6 <__swsetup_r+0xba>
 8000728:	4b25      	ldr	r3, [pc, #148]	; (80007c0 <__swsetup_r+0xd4>)
 800072a:	429c      	cmp	r4, r3
 800072c:	d101      	bne.n	8000732 <__swsetup_r+0x46>
 800072e:	68ac      	ldr	r4, [r5, #8]
 8000730:	e7eb      	b.n	800070a <__swsetup_r+0x1e>
 8000732:	4b24      	ldr	r3, [pc, #144]	; (80007c4 <__swsetup_r+0xd8>)
 8000734:	429c      	cmp	r4, r3
 8000736:	bf08      	it	eq
 8000738:	68ec      	ldreq	r4, [r5, #12]
 800073a:	e7e6      	b.n	800070a <__swsetup_r+0x1e>
 800073c:	0758      	lsls	r0, r3, #29
 800073e:	d512      	bpl.n	8000766 <__swsetup_r+0x7a>
 8000740:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000742:	b141      	cbz	r1, 8000756 <__swsetup_r+0x6a>
 8000744:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000748:	4299      	cmp	r1, r3
 800074a:	d002      	beq.n	8000752 <__swsetup_r+0x66>
 800074c:	4630      	mov	r0, r6
 800074e:	f000 fa59 	bl	8000c04 <_free_r>
 8000752:	2300      	movs	r3, #0
 8000754:	6363      	str	r3, [r4, #52]	; 0x34
 8000756:	89a3      	ldrh	r3, [r4, #12]
 8000758:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800075c:	81a3      	strh	r3, [r4, #12]
 800075e:	2300      	movs	r3, #0
 8000760:	6063      	str	r3, [r4, #4]
 8000762:	6923      	ldr	r3, [r4, #16]
 8000764:	6023      	str	r3, [r4, #0]
 8000766:	89a3      	ldrh	r3, [r4, #12]
 8000768:	f043 0308 	orr.w	r3, r3, #8
 800076c:	81a3      	strh	r3, [r4, #12]
 800076e:	6923      	ldr	r3, [r4, #16]
 8000770:	b94b      	cbnz	r3, 8000786 <__swsetup_r+0x9a>
 8000772:	89a3      	ldrh	r3, [r4, #12]
 8000774:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8000778:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800077c:	d003      	beq.n	8000786 <__swsetup_r+0x9a>
 800077e:	4621      	mov	r1, r4
 8000780:	4630      	mov	r0, r6
 8000782:	f000 f9ff 	bl	8000b84 <__smakebuf_r>
 8000786:	89a0      	ldrh	r0, [r4, #12]
 8000788:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800078c:	f010 0301 	ands.w	r3, r0, #1
 8000790:	d00a      	beq.n	80007a8 <__swsetup_r+0xbc>
 8000792:	2300      	movs	r3, #0
 8000794:	60a3      	str	r3, [r4, #8]
 8000796:	6963      	ldr	r3, [r4, #20]
 8000798:	425b      	negs	r3, r3
 800079a:	61a3      	str	r3, [r4, #24]
 800079c:	6923      	ldr	r3, [r4, #16]
 800079e:	b943      	cbnz	r3, 80007b2 <__swsetup_r+0xc6>
 80007a0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80007a4:	d1ba      	bne.n	800071c <__swsetup_r+0x30>
 80007a6:	bd70      	pop	{r4, r5, r6, pc}
 80007a8:	0781      	lsls	r1, r0, #30
 80007aa:	bf58      	it	pl
 80007ac:	6963      	ldrpl	r3, [r4, #20]
 80007ae:	60a3      	str	r3, [r4, #8]
 80007b0:	e7f4      	b.n	800079c <__swsetup_r+0xb0>
 80007b2:	2000      	movs	r0, #0
 80007b4:	e7f7      	b.n	80007a6 <__swsetup_r+0xba>
 80007b6:	bf00      	nop
 80007b8:	20000000 	.word	0x20000000
 80007bc:	08000f70 	.word	0x08000f70
 80007c0:	08000f90 	.word	0x08000f90
 80007c4:	08000f50 	.word	0x08000f50

080007c8 <__sflush_r>:
 80007c8:	898a      	ldrh	r2, [r1, #12]
 80007ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80007ce:	4605      	mov	r5, r0
 80007d0:	0710      	lsls	r0, r2, #28
 80007d2:	460c      	mov	r4, r1
 80007d4:	d458      	bmi.n	8000888 <__sflush_r+0xc0>
 80007d6:	684b      	ldr	r3, [r1, #4]
 80007d8:	2b00      	cmp	r3, #0
 80007da:	dc05      	bgt.n	80007e8 <__sflush_r+0x20>
 80007dc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80007de:	2b00      	cmp	r3, #0
 80007e0:	dc02      	bgt.n	80007e8 <__sflush_r+0x20>
 80007e2:	2000      	movs	r0, #0
 80007e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80007e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80007ea:	2e00      	cmp	r6, #0
 80007ec:	d0f9      	beq.n	80007e2 <__sflush_r+0x1a>
 80007ee:	2300      	movs	r3, #0
 80007f0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80007f4:	682f      	ldr	r7, [r5, #0]
 80007f6:	602b      	str	r3, [r5, #0]
 80007f8:	d032      	beq.n	8000860 <__sflush_r+0x98>
 80007fa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80007fc:	89a3      	ldrh	r3, [r4, #12]
 80007fe:	075a      	lsls	r2, r3, #29
 8000800:	d505      	bpl.n	800080e <__sflush_r+0x46>
 8000802:	6863      	ldr	r3, [r4, #4]
 8000804:	1ac0      	subs	r0, r0, r3
 8000806:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000808:	b10b      	cbz	r3, 800080e <__sflush_r+0x46>
 800080a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800080c:	1ac0      	subs	r0, r0, r3
 800080e:	2300      	movs	r3, #0
 8000810:	4602      	mov	r2, r0
 8000812:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000814:	6a21      	ldr	r1, [r4, #32]
 8000816:	4628      	mov	r0, r5
 8000818:	47b0      	blx	r6
 800081a:	1c43      	adds	r3, r0, #1
 800081c:	89a3      	ldrh	r3, [r4, #12]
 800081e:	d106      	bne.n	800082e <__sflush_r+0x66>
 8000820:	6829      	ldr	r1, [r5, #0]
 8000822:	291d      	cmp	r1, #29
 8000824:	d82c      	bhi.n	8000880 <__sflush_r+0xb8>
 8000826:	4a2a      	ldr	r2, [pc, #168]	; (80008d0 <__sflush_r+0x108>)
 8000828:	40ca      	lsrs	r2, r1
 800082a:	07d6      	lsls	r6, r2, #31
 800082c:	d528      	bpl.n	8000880 <__sflush_r+0xb8>
 800082e:	2200      	movs	r2, #0
 8000830:	6062      	str	r2, [r4, #4]
 8000832:	04d9      	lsls	r1, r3, #19
 8000834:	6922      	ldr	r2, [r4, #16]
 8000836:	6022      	str	r2, [r4, #0]
 8000838:	d504      	bpl.n	8000844 <__sflush_r+0x7c>
 800083a:	1c42      	adds	r2, r0, #1
 800083c:	d101      	bne.n	8000842 <__sflush_r+0x7a>
 800083e:	682b      	ldr	r3, [r5, #0]
 8000840:	b903      	cbnz	r3, 8000844 <__sflush_r+0x7c>
 8000842:	6560      	str	r0, [r4, #84]	; 0x54
 8000844:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000846:	602f      	str	r7, [r5, #0]
 8000848:	2900      	cmp	r1, #0
 800084a:	d0ca      	beq.n	80007e2 <__sflush_r+0x1a>
 800084c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000850:	4299      	cmp	r1, r3
 8000852:	d002      	beq.n	800085a <__sflush_r+0x92>
 8000854:	4628      	mov	r0, r5
 8000856:	f000 f9d5 	bl	8000c04 <_free_r>
 800085a:	2000      	movs	r0, #0
 800085c:	6360      	str	r0, [r4, #52]	; 0x34
 800085e:	e7c1      	b.n	80007e4 <__sflush_r+0x1c>
 8000860:	6a21      	ldr	r1, [r4, #32]
 8000862:	2301      	movs	r3, #1
 8000864:	4628      	mov	r0, r5
 8000866:	47b0      	blx	r6
 8000868:	1c41      	adds	r1, r0, #1
 800086a:	d1c7      	bne.n	80007fc <__sflush_r+0x34>
 800086c:	682b      	ldr	r3, [r5, #0]
 800086e:	2b00      	cmp	r3, #0
 8000870:	d0c4      	beq.n	80007fc <__sflush_r+0x34>
 8000872:	2b1d      	cmp	r3, #29
 8000874:	d001      	beq.n	800087a <__sflush_r+0xb2>
 8000876:	2b16      	cmp	r3, #22
 8000878:	d101      	bne.n	800087e <__sflush_r+0xb6>
 800087a:	602f      	str	r7, [r5, #0]
 800087c:	e7b1      	b.n	80007e2 <__sflush_r+0x1a>
 800087e:	89a3      	ldrh	r3, [r4, #12]
 8000880:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000884:	81a3      	strh	r3, [r4, #12]
 8000886:	e7ad      	b.n	80007e4 <__sflush_r+0x1c>
 8000888:	690f      	ldr	r7, [r1, #16]
 800088a:	2f00      	cmp	r7, #0
 800088c:	d0a9      	beq.n	80007e2 <__sflush_r+0x1a>
 800088e:	0793      	lsls	r3, r2, #30
 8000890:	680e      	ldr	r6, [r1, #0]
 8000892:	bf08      	it	eq
 8000894:	694b      	ldreq	r3, [r1, #20]
 8000896:	600f      	str	r7, [r1, #0]
 8000898:	bf18      	it	ne
 800089a:	2300      	movne	r3, #0
 800089c:	eba6 0807 	sub.w	r8, r6, r7
 80008a0:	608b      	str	r3, [r1, #8]
 80008a2:	f1b8 0f00 	cmp.w	r8, #0
 80008a6:	dd9c      	ble.n	80007e2 <__sflush_r+0x1a>
 80008a8:	6a21      	ldr	r1, [r4, #32]
 80008aa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80008ac:	4643      	mov	r3, r8
 80008ae:	463a      	mov	r2, r7
 80008b0:	4628      	mov	r0, r5
 80008b2:	47b0      	blx	r6
 80008b4:	2800      	cmp	r0, #0
 80008b6:	dc06      	bgt.n	80008c6 <__sflush_r+0xfe>
 80008b8:	89a3      	ldrh	r3, [r4, #12]
 80008ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008be:	81a3      	strh	r3, [r4, #12]
 80008c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80008c4:	e78e      	b.n	80007e4 <__sflush_r+0x1c>
 80008c6:	4407      	add	r7, r0
 80008c8:	eba8 0800 	sub.w	r8, r8, r0
 80008cc:	e7e9      	b.n	80008a2 <__sflush_r+0xda>
 80008ce:	bf00      	nop
 80008d0:	20400001 	.word	0x20400001

080008d4 <_fflush_r>:
 80008d4:	b538      	push	{r3, r4, r5, lr}
 80008d6:	690b      	ldr	r3, [r1, #16]
 80008d8:	4605      	mov	r5, r0
 80008da:	460c      	mov	r4, r1
 80008dc:	b913      	cbnz	r3, 80008e4 <_fflush_r+0x10>
 80008de:	2500      	movs	r5, #0
 80008e0:	4628      	mov	r0, r5
 80008e2:	bd38      	pop	{r3, r4, r5, pc}
 80008e4:	b118      	cbz	r0, 80008ee <_fflush_r+0x1a>
 80008e6:	6983      	ldr	r3, [r0, #24]
 80008e8:	b90b      	cbnz	r3, 80008ee <_fflush_r+0x1a>
 80008ea:	f000 f887 	bl	80009fc <__sinit>
 80008ee:	4b14      	ldr	r3, [pc, #80]	; (8000940 <_fflush_r+0x6c>)
 80008f0:	429c      	cmp	r4, r3
 80008f2:	d11b      	bne.n	800092c <_fflush_r+0x58>
 80008f4:	686c      	ldr	r4, [r5, #4]
 80008f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d0ef      	beq.n	80008de <_fflush_r+0xa>
 80008fe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8000900:	07d0      	lsls	r0, r2, #31
 8000902:	d404      	bmi.n	800090e <_fflush_r+0x3a>
 8000904:	0599      	lsls	r1, r3, #22
 8000906:	d402      	bmi.n	800090e <_fflush_r+0x3a>
 8000908:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800090a:	f000 f915 	bl	8000b38 <__retarget_lock_acquire_recursive>
 800090e:	4628      	mov	r0, r5
 8000910:	4621      	mov	r1, r4
 8000912:	f7ff ff59 	bl	80007c8 <__sflush_r>
 8000916:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000918:	07da      	lsls	r2, r3, #31
 800091a:	4605      	mov	r5, r0
 800091c:	d4e0      	bmi.n	80008e0 <_fflush_r+0xc>
 800091e:	89a3      	ldrh	r3, [r4, #12]
 8000920:	059b      	lsls	r3, r3, #22
 8000922:	d4dd      	bmi.n	80008e0 <_fflush_r+0xc>
 8000924:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000926:	f000 f908 	bl	8000b3a <__retarget_lock_release_recursive>
 800092a:	e7d9      	b.n	80008e0 <_fflush_r+0xc>
 800092c:	4b05      	ldr	r3, [pc, #20]	; (8000944 <_fflush_r+0x70>)
 800092e:	429c      	cmp	r4, r3
 8000930:	d101      	bne.n	8000936 <_fflush_r+0x62>
 8000932:	68ac      	ldr	r4, [r5, #8]
 8000934:	e7df      	b.n	80008f6 <_fflush_r+0x22>
 8000936:	4b04      	ldr	r3, [pc, #16]	; (8000948 <_fflush_r+0x74>)
 8000938:	429c      	cmp	r4, r3
 800093a:	bf08      	it	eq
 800093c:	68ec      	ldreq	r4, [r5, #12]
 800093e:	e7da      	b.n	80008f6 <_fflush_r+0x22>
 8000940:	08000f70 	.word	0x08000f70
 8000944:	08000f90 	.word	0x08000f90
 8000948:	08000f50 	.word	0x08000f50

0800094c <std>:
 800094c:	2300      	movs	r3, #0
 800094e:	b510      	push	{r4, lr}
 8000950:	4604      	mov	r4, r0
 8000952:	e9c0 3300 	strd	r3, r3, [r0]
 8000956:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800095a:	6083      	str	r3, [r0, #8]
 800095c:	8181      	strh	r1, [r0, #12]
 800095e:	6643      	str	r3, [r0, #100]	; 0x64
 8000960:	81c2      	strh	r2, [r0, #14]
 8000962:	6183      	str	r3, [r0, #24]
 8000964:	4619      	mov	r1, r3
 8000966:	2208      	movs	r2, #8
 8000968:	305c      	adds	r0, #92	; 0x5c
 800096a:	f7ff fdef 	bl	800054c <memset>
 800096e:	4b05      	ldr	r3, [pc, #20]	; (8000984 <std+0x38>)
 8000970:	6263      	str	r3, [r4, #36]	; 0x24
 8000972:	4b05      	ldr	r3, [pc, #20]	; (8000988 <std+0x3c>)
 8000974:	62a3      	str	r3, [r4, #40]	; 0x28
 8000976:	4b05      	ldr	r3, [pc, #20]	; (800098c <std+0x40>)
 8000978:	62e3      	str	r3, [r4, #44]	; 0x2c
 800097a:	4b05      	ldr	r3, [pc, #20]	; (8000990 <std+0x44>)
 800097c:	6224      	str	r4, [r4, #32]
 800097e:	6323      	str	r3, [r4, #48]	; 0x30
 8000980:	bd10      	pop	{r4, pc}
 8000982:	bf00      	nop
 8000984:	08000d79 	.word	0x08000d79
 8000988:	08000d9b 	.word	0x08000d9b
 800098c:	08000dd3 	.word	0x08000dd3
 8000990:	08000df7 	.word	0x08000df7

08000994 <_cleanup_r>:
 8000994:	4901      	ldr	r1, [pc, #4]	; (800099c <_cleanup_r+0x8>)
 8000996:	f000 b8af 	b.w	8000af8 <_fwalk_reent>
 800099a:	bf00      	nop
 800099c:	080008d5 	.word	0x080008d5

080009a0 <__sfmoreglue>:
 80009a0:	b570      	push	{r4, r5, r6, lr}
 80009a2:	1e4a      	subs	r2, r1, #1
 80009a4:	2568      	movs	r5, #104	; 0x68
 80009a6:	4355      	muls	r5, r2
 80009a8:	460e      	mov	r6, r1
 80009aa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80009ae:	f000 f979 	bl	8000ca4 <_malloc_r>
 80009b2:	4604      	mov	r4, r0
 80009b4:	b140      	cbz	r0, 80009c8 <__sfmoreglue+0x28>
 80009b6:	2100      	movs	r1, #0
 80009b8:	e9c0 1600 	strd	r1, r6, [r0]
 80009bc:	300c      	adds	r0, #12
 80009be:	60a0      	str	r0, [r4, #8]
 80009c0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80009c4:	f7ff fdc2 	bl	800054c <memset>
 80009c8:	4620      	mov	r0, r4
 80009ca:	bd70      	pop	{r4, r5, r6, pc}

080009cc <__sfp_lock_acquire>:
 80009cc:	4801      	ldr	r0, [pc, #4]	; (80009d4 <__sfp_lock_acquire+0x8>)
 80009ce:	f000 b8b3 	b.w	8000b38 <__retarget_lock_acquire_recursive>
 80009d2:	bf00      	nop
 80009d4:	20000094 	.word	0x20000094

080009d8 <__sfp_lock_release>:
 80009d8:	4801      	ldr	r0, [pc, #4]	; (80009e0 <__sfp_lock_release+0x8>)
 80009da:	f000 b8ae 	b.w	8000b3a <__retarget_lock_release_recursive>
 80009de:	bf00      	nop
 80009e0:	20000094 	.word	0x20000094

080009e4 <__sinit_lock_acquire>:
 80009e4:	4801      	ldr	r0, [pc, #4]	; (80009ec <__sinit_lock_acquire+0x8>)
 80009e6:	f000 b8a7 	b.w	8000b38 <__retarget_lock_acquire_recursive>
 80009ea:	bf00      	nop
 80009ec:	2000008f 	.word	0x2000008f

080009f0 <__sinit_lock_release>:
 80009f0:	4801      	ldr	r0, [pc, #4]	; (80009f8 <__sinit_lock_release+0x8>)
 80009f2:	f000 b8a2 	b.w	8000b3a <__retarget_lock_release_recursive>
 80009f6:	bf00      	nop
 80009f8:	2000008f 	.word	0x2000008f

080009fc <__sinit>:
 80009fc:	b510      	push	{r4, lr}
 80009fe:	4604      	mov	r4, r0
 8000a00:	f7ff fff0 	bl	80009e4 <__sinit_lock_acquire>
 8000a04:	69a3      	ldr	r3, [r4, #24]
 8000a06:	b11b      	cbz	r3, 8000a10 <__sinit+0x14>
 8000a08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000a0c:	f7ff bff0 	b.w	80009f0 <__sinit_lock_release>
 8000a10:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8000a14:	6523      	str	r3, [r4, #80]	; 0x50
 8000a16:	4b13      	ldr	r3, [pc, #76]	; (8000a64 <__sinit+0x68>)
 8000a18:	4a13      	ldr	r2, [pc, #76]	; (8000a68 <__sinit+0x6c>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	62a2      	str	r2, [r4, #40]	; 0x28
 8000a1e:	42a3      	cmp	r3, r4
 8000a20:	bf04      	itt	eq
 8000a22:	2301      	moveq	r3, #1
 8000a24:	61a3      	streq	r3, [r4, #24]
 8000a26:	4620      	mov	r0, r4
 8000a28:	f000 f820 	bl	8000a6c <__sfp>
 8000a2c:	6060      	str	r0, [r4, #4]
 8000a2e:	4620      	mov	r0, r4
 8000a30:	f000 f81c 	bl	8000a6c <__sfp>
 8000a34:	60a0      	str	r0, [r4, #8]
 8000a36:	4620      	mov	r0, r4
 8000a38:	f000 f818 	bl	8000a6c <__sfp>
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	60e0      	str	r0, [r4, #12]
 8000a40:	2104      	movs	r1, #4
 8000a42:	6860      	ldr	r0, [r4, #4]
 8000a44:	f7ff ff82 	bl	800094c <std>
 8000a48:	68a0      	ldr	r0, [r4, #8]
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	2109      	movs	r1, #9
 8000a4e:	f7ff ff7d 	bl	800094c <std>
 8000a52:	68e0      	ldr	r0, [r4, #12]
 8000a54:	2202      	movs	r2, #2
 8000a56:	2112      	movs	r1, #18
 8000a58:	f7ff ff78 	bl	800094c <std>
 8000a5c:	2301      	movs	r3, #1
 8000a5e:	61a3      	str	r3, [r4, #24]
 8000a60:	e7d2      	b.n	8000a08 <__sinit+0xc>
 8000a62:	bf00      	nop
 8000a64:	08000f4c 	.word	0x08000f4c
 8000a68:	08000995 	.word	0x08000995

08000a6c <__sfp>:
 8000a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a6e:	4607      	mov	r7, r0
 8000a70:	f7ff ffac 	bl	80009cc <__sfp_lock_acquire>
 8000a74:	4b1e      	ldr	r3, [pc, #120]	; (8000af0 <__sfp+0x84>)
 8000a76:	681e      	ldr	r6, [r3, #0]
 8000a78:	69b3      	ldr	r3, [r6, #24]
 8000a7a:	b913      	cbnz	r3, 8000a82 <__sfp+0x16>
 8000a7c:	4630      	mov	r0, r6
 8000a7e:	f7ff ffbd 	bl	80009fc <__sinit>
 8000a82:	3648      	adds	r6, #72	; 0x48
 8000a84:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000a88:	3b01      	subs	r3, #1
 8000a8a:	d503      	bpl.n	8000a94 <__sfp+0x28>
 8000a8c:	6833      	ldr	r3, [r6, #0]
 8000a8e:	b30b      	cbz	r3, 8000ad4 <__sfp+0x68>
 8000a90:	6836      	ldr	r6, [r6, #0]
 8000a92:	e7f7      	b.n	8000a84 <__sfp+0x18>
 8000a94:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000a98:	b9d5      	cbnz	r5, 8000ad0 <__sfp+0x64>
 8000a9a:	4b16      	ldr	r3, [pc, #88]	; (8000af4 <__sfp+0x88>)
 8000a9c:	60e3      	str	r3, [r4, #12]
 8000a9e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000aa2:	6665      	str	r5, [r4, #100]	; 0x64
 8000aa4:	f000 f847 	bl	8000b36 <__retarget_lock_init_recursive>
 8000aa8:	f7ff ff96 	bl	80009d8 <__sfp_lock_release>
 8000aac:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8000ab0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8000ab4:	6025      	str	r5, [r4, #0]
 8000ab6:	61a5      	str	r5, [r4, #24]
 8000ab8:	2208      	movs	r2, #8
 8000aba:	4629      	mov	r1, r5
 8000abc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000ac0:	f7ff fd44 	bl	800054c <memset>
 8000ac4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000ac8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000acc:	4620      	mov	r0, r4
 8000ace:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000ad0:	3468      	adds	r4, #104	; 0x68
 8000ad2:	e7d9      	b.n	8000a88 <__sfp+0x1c>
 8000ad4:	2104      	movs	r1, #4
 8000ad6:	4638      	mov	r0, r7
 8000ad8:	f7ff ff62 	bl	80009a0 <__sfmoreglue>
 8000adc:	4604      	mov	r4, r0
 8000ade:	6030      	str	r0, [r6, #0]
 8000ae0:	2800      	cmp	r0, #0
 8000ae2:	d1d5      	bne.n	8000a90 <__sfp+0x24>
 8000ae4:	f7ff ff78 	bl	80009d8 <__sfp_lock_release>
 8000ae8:	230c      	movs	r3, #12
 8000aea:	603b      	str	r3, [r7, #0]
 8000aec:	e7ee      	b.n	8000acc <__sfp+0x60>
 8000aee:	bf00      	nop
 8000af0:	08000f4c 	.word	0x08000f4c
 8000af4:	ffff0001 	.word	0xffff0001

08000af8 <_fwalk_reent>:
 8000af8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000afc:	4606      	mov	r6, r0
 8000afe:	4688      	mov	r8, r1
 8000b00:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000b04:	2700      	movs	r7, #0
 8000b06:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000b0a:	f1b9 0901 	subs.w	r9, r9, #1
 8000b0e:	d505      	bpl.n	8000b1c <_fwalk_reent+0x24>
 8000b10:	6824      	ldr	r4, [r4, #0]
 8000b12:	2c00      	cmp	r4, #0
 8000b14:	d1f7      	bne.n	8000b06 <_fwalk_reent+0xe>
 8000b16:	4638      	mov	r0, r7
 8000b18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000b1c:	89ab      	ldrh	r3, [r5, #12]
 8000b1e:	2b01      	cmp	r3, #1
 8000b20:	d907      	bls.n	8000b32 <_fwalk_reent+0x3a>
 8000b22:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000b26:	3301      	adds	r3, #1
 8000b28:	d003      	beq.n	8000b32 <_fwalk_reent+0x3a>
 8000b2a:	4629      	mov	r1, r5
 8000b2c:	4630      	mov	r0, r6
 8000b2e:	47c0      	blx	r8
 8000b30:	4307      	orrs	r7, r0
 8000b32:	3568      	adds	r5, #104	; 0x68
 8000b34:	e7e9      	b.n	8000b0a <_fwalk_reent+0x12>

08000b36 <__retarget_lock_init_recursive>:
 8000b36:	4770      	bx	lr

08000b38 <__retarget_lock_acquire_recursive>:
 8000b38:	4770      	bx	lr

08000b3a <__retarget_lock_release_recursive>:
 8000b3a:	4770      	bx	lr

08000b3c <__swhatbuf_r>:
 8000b3c:	b570      	push	{r4, r5, r6, lr}
 8000b3e:	460e      	mov	r6, r1
 8000b40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000b44:	2900      	cmp	r1, #0
 8000b46:	b096      	sub	sp, #88	; 0x58
 8000b48:	4614      	mov	r4, r2
 8000b4a:	461d      	mov	r5, r3
 8000b4c:	da07      	bge.n	8000b5e <__swhatbuf_r+0x22>
 8000b4e:	2300      	movs	r3, #0
 8000b50:	602b      	str	r3, [r5, #0]
 8000b52:	89b3      	ldrh	r3, [r6, #12]
 8000b54:	061a      	lsls	r2, r3, #24
 8000b56:	d410      	bmi.n	8000b7a <__swhatbuf_r+0x3e>
 8000b58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b5c:	e00e      	b.n	8000b7c <__swhatbuf_r+0x40>
 8000b5e:	466a      	mov	r2, sp
 8000b60:	f000 f970 	bl	8000e44 <_fstat_r>
 8000b64:	2800      	cmp	r0, #0
 8000b66:	dbf2      	blt.n	8000b4e <__swhatbuf_r+0x12>
 8000b68:	9a01      	ldr	r2, [sp, #4]
 8000b6a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8000b6e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8000b72:	425a      	negs	r2, r3
 8000b74:	415a      	adcs	r2, r3
 8000b76:	602a      	str	r2, [r5, #0]
 8000b78:	e7ee      	b.n	8000b58 <__swhatbuf_r+0x1c>
 8000b7a:	2340      	movs	r3, #64	; 0x40
 8000b7c:	2000      	movs	r0, #0
 8000b7e:	6023      	str	r3, [r4, #0]
 8000b80:	b016      	add	sp, #88	; 0x58
 8000b82:	bd70      	pop	{r4, r5, r6, pc}

08000b84 <__smakebuf_r>:
 8000b84:	898b      	ldrh	r3, [r1, #12]
 8000b86:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000b88:	079d      	lsls	r5, r3, #30
 8000b8a:	4606      	mov	r6, r0
 8000b8c:	460c      	mov	r4, r1
 8000b8e:	d507      	bpl.n	8000ba0 <__smakebuf_r+0x1c>
 8000b90:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8000b94:	6023      	str	r3, [r4, #0]
 8000b96:	6123      	str	r3, [r4, #16]
 8000b98:	2301      	movs	r3, #1
 8000b9a:	6163      	str	r3, [r4, #20]
 8000b9c:	b002      	add	sp, #8
 8000b9e:	bd70      	pop	{r4, r5, r6, pc}
 8000ba0:	ab01      	add	r3, sp, #4
 8000ba2:	466a      	mov	r2, sp
 8000ba4:	f7ff ffca 	bl	8000b3c <__swhatbuf_r>
 8000ba8:	9900      	ldr	r1, [sp, #0]
 8000baa:	4605      	mov	r5, r0
 8000bac:	4630      	mov	r0, r6
 8000bae:	f000 f879 	bl	8000ca4 <_malloc_r>
 8000bb2:	b948      	cbnz	r0, 8000bc8 <__smakebuf_r+0x44>
 8000bb4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000bb8:	059a      	lsls	r2, r3, #22
 8000bba:	d4ef      	bmi.n	8000b9c <__smakebuf_r+0x18>
 8000bbc:	f023 0303 	bic.w	r3, r3, #3
 8000bc0:	f043 0302 	orr.w	r3, r3, #2
 8000bc4:	81a3      	strh	r3, [r4, #12]
 8000bc6:	e7e3      	b.n	8000b90 <__smakebuf_r+0xc>
 8000bc8:	4b0d      	ldr	r3, [pc, #52]	; (8000c00 <__smakebuf_r+0x7c>)
 8000bca:	62b3      	str	r3, [r6, #40]	; 0x28
 8000bcc:	89a3      	ldrh	r3, [r4, #12]
 8000bce:	6020      	str	r0, [r4, #0]
 8000bd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bd4:	81a3      	strh	r3, [r4, #12]
 8000bd6:	9b00      	ldr	r3, [sp, #0]
 8000bd8:	6163      	str	r3, [r4, #20]
 8000bda:	9b01      	ldr	r3, [sp, #4]
 8000bdc:	6120      	str	r0, [r4, #16]
 8000bde:	b15b      	cbz	r3, 8000bf8 <__smakebuf_r+0x74>
 8000be0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000be4:	4630      	mov	r0, r6
 8000be6:	f000 f93f 	bl	8000e68 <_isatty_r>
 8000bea:	b128      	cbz	r0, 8000bf8 <__smakebuf_r+0x74>
 8000bec:	89a3      	ldrh	r3, [r4, #12]
 8000bee:	f023 0303 	bic.w	r3, r3, #3
 8000bf2:	f043 0301 	orr.w	r3, r3, #1
 8000bf6:	81a3      	strh	r3, [r4, #12]
 8000bf8:	89a0      	ldrh	r0, [r4, #12]
 8000bfa:	4305      	orrs	r5, r0
 8000bfc:	81a5      	strh	r5, [r4, #12]
 8000bfe:	e7cd      	b.n	8000b9c <__smakebuf_r+0x18>
 8000c00:	08000995 	.word	0x08000995

08000c04 <_free_r>:
 8000c04:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000c06:	2900      	cmp	r1, #0
 8000c08:	d048      	beq.n	8000c9c <_free_r+0x98>
 8000c0a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000c0e:	9001      	str	r0, [sp, #4]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	f1a1 0404 	sub.w	r4, r1, #4
 8000c16:	bfb8      	it	lt
 8000c18:	18e4      	addlt	r4, r4, r3
 8000c1a:	f000 f947 	bl	8000eac <__malloc_lock>
 8000c1e:	4a20      	ldr	r2, [pc, #128]	; (8000ca0 <_free_r+0x9c>)
 8000c20:	9801      	ldr	r0, [sp, #4]
 8000c22:	6813      	ldr	r3, [r2, #0]
 8000c24:	4615      	mov	r5, r2
 8000c26:	b933      	cbnz	r3, 8000c36 <_free_r+0x32>
 8000c28:	6063      	str	r3, [r4, #4]
 8000c2a:	6014      	str	r4, [r2, #0]
 8000c2c:	b003      	add	sp, #12
 8000c2e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000c32:	f000 b941 	b.w	8000eb8 <__malloc_unlock>
 8000c36:	42a3      	cmp	r3, r4
 8000c38:	d90b      	bls.n	8000c52 <_free_r+0x4e>
 8000c3a:	6821      	ldr	r1, [r4, #0]
 8000c3c:	1862      	adds	r2, r4, r1
 8000c3e:	4293      	cmp	r3, r2
 8000c40:	bf04      	itt	eq
 8000c42:	681a      	ldreq	r2, [r3, #0]
 8000c44:	685b      	ldreq	r3, [r3, #4]
 8000c46:	6063      	str	r3, [r4, #4]
 8000c48:	bf04      	itt	eq
 8000c4a:	1852      	addeq	r2, r2, r1
 8000c4c:	6022      	streq	r2, [r4, #0]
 8000c4e:	602c      	str	r4, [r5, #0]
 8000c50:	e7ec      	b.n	8000c2c <_free_r+0x28>
 8000c52:	461a      	mov	r2, r3
 8000c54:	685b      	ldr	r3, [r3, #4]
 8000c56:	b10b      	cbz	r3, 8000c5c <_free_r+0x58>
 8000c58:	42a3      	cmp	r3, r4
 8000c5a:	d9fa      	bls.n	8000c52 <_free_r+0x4e>
 8000c5c:	6811      	ldr	r1, [r2, #0]
 8000c5e:	1855      	adds	r5, r2, r1
 8000c60:	42a5      	cmp	r5, r4
 8000c62:	d10b      	bne.n	8000c7c <_free_r+0x78>
 8000c64:	6824      	ldr	r4, [r4, #0]
 8000c66:	4421      	add	r1, r4
 8000c68:	1854      	adds	r4, r2, r1
 8000c6a:	42a3      	cmp	r3, r4
 8000c6c:	6011      	str	r1, [r2, #0]
 8000c6e:	d1dd      	bne.n	8000c2c <_free_r+0x28>
 8000c70:	681c      	ldr	r4, [r3, #0]
 8000c72:	685b      	ldr	r3, [r3, #4]
 8000c74:	6053      	str	r3, [r2, #4]
 8000c76:	4421      	add	r1, r4
 8000c78:	6011      	str	r1, [r2, #0]
 8000c7a:	e7d7      	b.n	8000c2c <_free_r+0x28>
 8000c7c:	d902      	bls.n	8000c84 <_free_r+0x80>
 8000c7e:	230c      	movs	r3, #12
 8000c80:	6003      	str	r3, [r0, #0]
 8000c82:	e7d3      	b.n	8000c2c <_free_r+0x28>
 8000c84:	6825      	ldr	r5, [r4, #0]
 8000c86:	1961      	adds	r1, r4, r5
 8000c88:	428b      	cmp	r3, r1
 8000c8a:	bf04      	itt	eq
 8000c8c:	6819      	ldreq	r1, [r3, #0]
 8000c8e:	685b      	ldreq	r3, [r3, #4]
 8000c90:	6063      	str	r3, [r4, #4]
 8000c92:	bf04      	itt	eq
 8000c94:	1949      	addeq	r1, r1, r5
 8000c96:	6021      	streq	r1, [r4, #0]
 8000c98:	6054      	str	r4, [r2, #4]
 8000c9a:	e7c7      	b.n	8000c2c <_free_r+0x28>
 8000c9c:	b003      	add	sp, #12
 8000c9e:	bd30      	pop	{r4, r5, pc}
 8000ca0:	20000084 	.word	0x20000084

08000ca4 <_malloc_r>:
 8000ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ca6:	1ccd      	adds	r5, r1, #3
 8000ca8:	f025 0503 	bic.w	r5, r5, #3
 8000cac:	3508      	adds	r5, #8
 8000cae:	2d0c      	cmp	r5, #12
 8000cb0:	bf38      	it	cc
 8000cb2:	250c      	movcc	r5, #12
 8000cb4:	2d00      	cmp	r5, #0
 8000cb6:	4606      	mov	r6, r0
 8000cb8:	db01      	blt.n	8000cbe <_malloc_r+0x1a>
 8000cba:	42a9      	cmp	r1, r5
 8000cbc:	d903      	bls.n	8000cc6 <_malloc_r+0x22>
 8000cbe:	230c      	movs	r3, #12
 8000cc0:	6033      	str	r3, [r6, #0]
 8000cc2:	2000      	movs	r0, #0
 8000cc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000cc6:	f000 f8f1 	bl	8000eac <__malloc_lock>
 8000cca:	4921      	ldr	r1, [pc, #132]	; (8000d50 <_malloc_r+0xac>)
 8000ccc:	680a      	ldr	r2, [r1, #0]
 8000cce:	4614      	mov	r4, r2
 8000cd0:	b99c      	cbnz	r4, 8000cfa <_malloc_r+0x56>
 8000cd2:	4f20      	ldr	r7, [pc, #128]	; (8000d54 <_malloc_r+0xb0>)
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	b923      	cbnz	r3, 8000ce2 <_malloc_r+0x3e>
 8000cd8:	4621      	mov	r1, r4
 8000cda:	4630      	mov	r0, r6
 8000cdc:	f000 f83c 	bl	8000d58 <_sbrk_r>
 8000ce0:	6038      	str	r0, [r7, #0]
 8000ce2:	4629      	mov	r1, r5
 8000ce4:	4630      	mov	r0, r6
 8000ce6:	f000 f837 	bl	8000d58 <_sbrk_r>
 8000cea:	1c43      	adds	r3, r0, #1
 8000cec:	d123      	bne.n	8000d36 <_malloc_r+0x92>
 8000cee:	230c      	movs	r3, #12
 8000cf0:	6033      	str	r3, [r6, #0]
 8000cf2:	4630      	mov	r0, r6
 8000cf4:	f000 f8e0 	bl	8000eb8 <__malloc_unlock>
 8000cf8:	e7e3      	b.n	8000cc2 <_malloc_r+0x1e>
 8000cfa:	6823      	ldr	r3, [r4, #0]
 8000cfc:	1b5b      	subs	r3, r3, r5
 8000cfe:	d417      	bmi.n	8000d30 <_malloc_r+0x8c>
 8000d00:	2b0b      	cmp	r3, #11
 8000d02:	d903      	bls.n	8000d0c <_malloc_r+0x68>
 8000d04:	6023      	str	r3, [r4, #0]
 8000d06:	441c      	add	r4, r3
 8000d08:	6025      	str	r5, [r4, #0]
 8000d0a:	e004      	b.n	8000d16 <_malloc_r+0x72>
 8000d0c:	6863      	ldr	r3, [r4, #4]
 8000d0e:	42a2      	cmp	r2, r4
 8000d10:	bf0c      	ite	eq
 8000d12:	600b      	streq	r3, [r1, #0]
 8000d14:	6053      	strne	r3, [r2, #4]
 8000d16:	4630      	mov	r0, r6
 8000d18:	f000 f8ce 	bl	8000eb8 <__malloc_unlock>
 8000d1c:	f104 000b 	add.w	r0, r4, #11
 8000d20:	1d23      	adds	r3, r4, #4
 8000d22:	f020 0007 	bic.w	r0, r0, #7
 8000d26:	1ac2      	subs	r2, r0, r3
 8000d28:	d0cc      	beq.n	8000cc4 <_malloc_r+0x20>
 8000d2a:	1a1b      	subs	r3, r3, r0
 8000d2c:	50a3      	str	r3, [r4, r2]
 8000d2e:	e7c9      	b.n	8000cc4 <_malloc_r+0x20>
 8000d30:	4622      	mov	r2, r4
 8000d32:	6864      	ldr	r4, [r4, #4]
 8000d34:	e7cc      	b.n	8000cd0 <_malloc_r+0x2c>
 8000d36:	1cc4      	adds	r4, r0, #3
 8000d38:	f024 0403 	bic.w	r4, r4, #3
 8000d3c:	42a0      	cmp	r0, r4
 8000d3e:	d0e3      	beq.n	8000d08 <_malloc_r+0x64>
 8000d40:	1a21      	subs	r1, r4, r0
 8000d42:	4630      	mov	r0, r6
 8000d44:	f000 f808 	bl	8000d58 <_sbrk_r>
 8000d48:	3001      	adds	r0, #1
 8000d4a:	d1dd      	bne.n	8000d08 <_malloc_r+0x64>
 8000d4c:	e7cf      	b.n	8000cee <_malloc_r+0x4a>
 8000d4e:	bf00      	nop
 8000d50:	20000084 	.word	0x20000084
 8000d54:	20000088 	.word	0x20000088

08000d58 <_sbrk_r>:
 8000d58:	b538      	push	{r3, r4, r5, lr}
 8000d5a:	4d06      	ldr	r5, [pc, #24]	; (8000d74 <_sbrk_r+0x1c>)
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	4604      	mov	r4, r0
 8000d60:	4608      	mov	r0, r1
 8000d62:	602b      	str	r3, [r5, #0]
 8000d64:	f7ff fb68 	bl	8000438 <_sbrk>
 8000d68:	1c43      	adds	r3, r0, #1
 8000d6a:	d102      	bne.n	8000d72 <_sbrk_r+0x1a>
 8000d6c:	682b      	ldr	r3, [r5, #0]
 8000d6e:	b103      	cbz	r3, 8000d72 <_sbrk_r+0x1a>
 8000d70:	6023      	str	r3, [r4, #0]
 8000d72:	bd38      	pop	{r3, r4, r5, pc}
 8000d74:	20000098 	.word	0x20000098

08000d78 <__sread>:
 8000d78:	b510      	push	{r4, lr}
 8000d7a:	460c      	mov	r4, r1
 8000d7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000d80:	f000 f8a0 	bl	8000ec4 <_read_r>
 8000d84:	2800      	cmp	r0, #0
 8000d86:	bfab      	itete	ge
 8000d88:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8000d8a:	89a3      	ldrhlt	r3, [r4, #12]
 8000d8c:	181b      	addge	r3, r3, r0
 8000d8e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8000d92:	bfac      	ite	ge
 8000d94:	6563      	strge	r3, [r4, #84]	; 0x54
 8000d96:	81a3      	strhlt	r3, [r4, #12]
 8000d98:	bd10      	pop	{r4, pc}

08000d9a <__swrite>:
 8000d9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000d9e:	461f      	mov	r7, r3
 8000da0:	898b      	ldrh	r3, [r1, #12]
 8000da2:	05db      	lsls	r3, r3, #23
 8000da4:	4605      	mov	r5, r0
 8000da6:	460c      	mov	r4, r1
 8000da8:	4616      	mov	r6, r2
 8000daa:	d505      	bpl.n	8000db8 <__swrite+0x1e>
 8000dac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000db0:	2302      	movs	r3, #2
 8000db2:	2200      	movs	r2, #0
 8000db4:	f000 f868 	bl	8000e88 <_lseek_r>
 8000db8:	89a3      	ldrh	r3, [r4, #12]
 8000dba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000dbe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000dc2:	81a3      	strh	r3, [r4, #12]
 8000dc4:	4632      	mov	r2, r6
 8000dc6:	463b      	mov	r3, r7
 8000dc8:	4628      	mov	r0, r5
 8000dca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000dce:	f000 b817 	b.w	8000e00 <_write_r>

08000dd2 <__sseek>:
 8000dd2:	b510      	push	{r4, lr}
 8000dd4:	460c      	mov	r4, r1
 8000dd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000dda:	f000 f855 	bl	8000e88 <_lseek_r>
 8000dde:	1c43      	adds	r3, r0, #1
 8000de0:	89a3      	ldrh	r3, [r4, #12]
 8000de2:	bf15      	itete	ne
 8000de4:	6560      	strne	r0, [r4, #84]	; 0x54
 8000de6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8000dea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8000dee:	81a3      	strheq	r3, [r4, #12]
 8000df0:	bf18      	it	ne
 8000df2:	81a3      	strhne	r3, [r4, #12]
 8000df4:	bd10      	pop	{r4, pc}

08000df6 <__sclose>:
 8000df6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000dfa:	f000 b813 	b.w	8000e24 <_close_r>
	...

08000e00 <_write_r>:
 8000e00:	b538      	push	{r3, r4, r5, lr}
 8000e02:	4d07      	ldr	r5, [pc, #28]	; (8000e20 <_write_r+0x20>)
 8000e04:	4604      	mov	r4, r0
 8000e06:	4608      	mov	r0, r1
 8000e08:	4611      	mov	r1, r2
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	602a      	str	r2, [r5, #0]
 8000e0e:	461a      	mov	r2, r3
 8000e10:	f7ff fac1 	bl	8000396 <_write>
 8000e14:	1c43      	adds	r3, r0, #1
 8000e16:	d102      	bne.n	8000e1e <_write_r+0x1e>
 8000e18:	682b      	ldr	r3, [r5, #0]
 8000e1a:	b103      	cbz	r3, 8000e1e <_write_r+0x1e>
 8000e1c:	6023      	str	r3, [r4, #0]
 8000e1e:	bd38      	pop	{r3, r4, r5, pc}
 8000e20:	20000098 	.word	0x20000098

08000e24 <_close_r>:
 8000e24:	b538      	push	{r3, r4, r5, lr}
 8000e26:	4d06      	ldr	r5, [pc, #24]	; (8000e40 <_close_r+0x1c>)
 8000e28:	2300      	movs	r3, #0
 8000e2a:	4604      	mov	r4, r0
 8000e2c:	4608      	mov	r0, r1
 8000e2e:	602b      	str	r3, [r5, #0]
 8000e30:	f7ff facd 	bl	80003ce <_close>
 8000e34:	1c43      	adds	r3, r0, #1
 8000e36:	d102      	bne.n	8000e3e <_close_r+0x1a>
 8000e38:	682b      	ldr	r3, [r5, #0]
 8000e3a:	b103      	cbz	r3, 8000e3e <_close_r+0x1a>
 8000e3c:	6023      	str	r3, [r4, #0]
 8000e3e:	bd38      	pop	{r3, r4, r5, pc}
 8000e40:	20000098 	.word	0x20000098

08000e44 <_fstat_r>:
 8000e44:	b538      	push	{r3, r4, r5, lr}
 8000e46:	4d07      	ldr	r5, [pc, #28]	; (8000e64 <_fstat_r+0x20>)
 8000e48:	2300      	movs	r3, #0
 8000e4a:	4604      	mov	r4, r0
 8000e4c:	4608      	mov	r0, r1
 8000e4e:	4611      	mov	r1, r2
 8000e50:	602b      	str	r3, [r5, #0]
 8000e52:	f7ff fac8 	bl	80003e6 <_fstat>
 8000e56:	1c43      	adds	r3, r0, #1
 8000e58:	d102      	bne.n	8000e60 <_fstat_r+0x1c>
 8000e5a:	682b      	ldr	r3, [r5, #0]
 8000e5c:	b103      	cbz	r3, 8000e60 <_fstat_r+0x1c>
 8000e5e:	6023      	str	r3, [r4, #0]
 8000e60:	bd38      	pop	{r3, r4, r5, pc}
 8000e62:	bf00      	nop
 8000e64:	20000098 	.word	0x20000098

08000e68 <_isatty_r>:
 8000e68:	b538      	push	{r3, r4, r5, lr}
 8000e6a:	4d06      	ldr	r5, [pc, #24]	; (8000e84 <_isatty_r+0x1c>)
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	4604      	mov	r4, r0
 8000e70:	4608      	mov	r0, r1
 8000e72:	602b      	str	r3, [r5, #0]
 8000e74:	f7ff fac7 	bl	8000406 <_isatty>
 8000e78:	1c43      	adds	r3, r0, #1
 8000e7a:	d102      	bne.n	8000e82 <_isatty_r+0x1a>
 8000e7c:	682b      	ldr	r3, [r5, #0]
 8000e7e:	b103      	cbz	r3, 8000e82 <_isatty_r+0x1a>
 8000e80:	6023      	str	r3, [r4, #0]
 8000e82:	bd38      	pop	{r3, r4, r5, pc}
 8000e84:	20000098 	.word	0x20000098

08000e88 <_lseek_r>:
 8000e88:	b538      	push	{r3, r4, r5, lr}
 8000e8a:	4d07      	ldr	r5, [pc, #28]	; (8000ea8 <_lseek_r+0x20>)
 8000e8c:	4604      	mov	r4, r0
 8000e8e:	4608      	mov	r0, r1
 8000e90:	4611      	mov	r1, r2
 8000e92:	2200      	movs	r2, #0
 8000e94:	602a      	str	r2, [r5, #0]
 8000e96:	461a      	mov	r2, r3
 8000e98:	f7ff fac0 	bl	800041c <_lseek>
 8000e9c:	1c43      	adds	r3, r0, #1
 8000e9e:	d102      	bne.n	8000ea6 <_lseek_r+0x1e>
 8000ea0:	682b      	ldr	r3, [r5, #0]
 8000ea2:	b103      	cbz	r3, 8000ea6 <_lseek_r+0x1e>
 8000ea4:	6023      	str	r3, [r4, #0]
 8000ea6:	bd38      	pop	{r3, r4, r5, pc}
 8000ea8:	20000098 	.word	0x20000098

08000eac <__malloc_lock>:
 8000eac:	4801      	ldr	r0, [pc, #4]	; (8000eb4 <__malloc_lock+0x8>)
 8000eae:	f7ff be43 	b.w	8000b38 <__retarget_lock_acquire_recursive>
 8000eb2:	bf00      	nop
 8000eb4:	20000090 	.word	0x20000090

08000eb8 <__malloc_unlock>:
 8000eb8:	4801      	ldr	r0, [pc, #4]	; (8000ec0 <__malloc_unlock+0x8>)
 8000eba:	f7ff be3e 	b.w	8000b3a <__retarget_lock_release_recursive>
 8000ebe:	bf00      	nop
 8000ec0:	20000090 	.word	0x20000090

08000ec4 <_read_r>:
 8000ec4:	b538      	push	{r3, r4, r5, lr}
 8000ec6:	4d07      	ldr	r5, [pc, #28]	; (8000ee4 <_read_r+0x20>)
 8000ec8:	4604      	mov	r4, r0
 8000eca:	4608      	mov	r0, r1
 8000ecc:	4611      	mov	r1, r2
 8000ece:	2200      	movs	r2, #0
 8000ed0:	602a      	str	r2, [r5, #0]
 8000ed2:	461a      	mov	r2, r3
 8000ed4:	f7ff fa42 	bl	800035c <_read>
 8000ed8:	1c43      	adds	r3, r0, #1
 8000eda:	d102      	bne.n	8000ee2 <_read_r+0x1e>
 8000edc:	682b      	ldr	r3, [r5, #0]
 8000ede:	b103      	cbz	r3, 8000ee2 <_read_r+0x1e>
 8000ee0:	6023      	str	r3, [r4, #0]
 8000ee2:	bd38      	pop	{r3, r4, r5, pc}
 8000ee4:	20000098 	.word	0x20000098

08000ee8 <_init>:
 8000ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000eea:	bf00      	nop
 8000eec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000eee:	bc08      	pop	{r3}
 8000ef0:	469e      	mov	lr, r3
 8000ef2:	4770      	bx	lr

08000ef4 <_fini>:
 8000ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ef6:	bf00      	nop
 8000ef8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000efa:	bc08      	pop	{r3}
 8000efc:	469e      	mov	lr, r3
 8000efe:	4770      	bx	lr
